[XComGame.XComGameState_AIPlayerData]
; Effectively removing Downthrottling (steering away pods from active fights)
-DownThrottleUnitCount=4  ; Number of enemies engaged to activate Down Throttling.
+DownThrottleUnitCount=99

; Removal of the artificial limit to number of engaged enemies
-MaxEngagedEnemies[0]=4   ; Rookie
-MaxEngagedEnemies[1]=6   ; Veteran
-MaxEngagedEnemies[2]=6   ; Commander
-MaxEngagedEnemies[3]=99  ; Legend
+MaxEngagedEnemies[0]=99   ; Rookie
+MaxEngagedEnemies[1]=99   ; Veteran
+MaxEngagedEnemies[2]=99   ; Commander
+MaxEngagedEnemies[3]=99   ; Legend

[XComGame.XComGameState_AIGroup]
; Increasing the odds and the distance of a fallback by the last enemy in a pod.
-FallbackChance=0.5f
-UnitInFallbackRangeMeters=5      
+FallbackChance=0.7f 
+UnitInFallbackRangeMeters=8 

; These units can't fall back.
+FallbackExclusionList=ABAChryssalidM1
+FallbackExclusionList=ABAChryssalidM2
+FallbackExclusionList=ABAChryssalidM3
+FallbackExclusionList=ABAChryssalidM4
+FallbackExclusionList=ChryssalidSpitter
+FallbackExclusionList=ChryssalidBleeder
+FallbackExclusionList=ChryssalidMommy
+FallbackExclusionList=ChryssalidDaddy
+FallbackExclusionList=ChryssalidAbomination
+FallbackExclusionList=SectoidPuppeteer
+FallbackExclusionList=SectoidPuppeteerM4
+FallbackExclusionList=PsiPuppet
+FallbackExclusionList=Shoggoth
+FallbackExclusionList=BerserkerFire
+FallbackExclusionList=BerserkerFireM4
+FallbackExclusionList=BerserkerM4
+FallbackExclusionList=StealthSectopod
+FallbackExclusionList=AndromedonRobot
+FallbackExclusionList=AndromedonRobotM4

[XComGame.XGAIPlayer]
; Removing Panic and similar effects from the "Last Resort" lists. This makes enemies shoot at panicked targets instead of ignoring them.
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")

[XComGame.XGAIPlayer_TheLost]
-DistributionPercentToXCom=70 ;Remainder percent is set to attack Advent or Aliens.
+DistributionPercentToXCom=50

[XComGame.XGAIBehavior]
; Slight increase to the default distance that aliens try to keep.
-DefaultIdealRange=10.0f
+DefaultIdealRange=12.0f

; Decrease in the desire of aliens to change their current position.
-CURR_TILE_LINGER_PENALTY=0.75
+CURR_TILE_LINGER_PENALTY=0.95

; Increase in the desire of aliens to find cover, especially high cover.
-CALC_MID_COVER_FACTOR=1.0f 
-CALC_FULL_COVER_FACTOR=1.1f 
-CALC_FULL_COVER_FACTOR_POD_LEADER=2.5f
+CALC_MID_COVER_FACTOR=1.5f 
+CALC_FULL_COVER_FACTOR=2.0f 
+CALC_FULL_COVER_FACTOR_POD_LEADER=3f

; NOTE: This is where the movement profiles would go.
; I am keeping them unchanged for now, depending on the global increase to cover weight instead. 
; i want to test the default profiles first before changing them up too much.

; Two new movement profiles, one to facilitate the new Stunlancer behavior, one for very defensive units
+m_arrMoveWeightProfile=(Profile=Stunlancer, fCoverWeight=1f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1f, fFarModifier=1f, fPriorityDistWeight=1.0f)
+m_arrMoveWeightProfile=(Profile=StayBack, fCoverWeight=2.0f, fDistanceWeight=0.6f, fFlankingWeight=0.1f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=0.3f, fHeightWeight=3.0f, fCloseModifier=0.6f, fFarModifier=2f) 

+m_arrMoveWeightProfile=(Profile=MWP_GrappleSkirm, fCoverWeight=2.0f, fDistanceWeight=1.5f, fFlankingWeight=1.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.0f, fCloseModifier=1.0f, fFarModifier=1.0f)

; Changing Mimic Beacon behavior
-m_arrMoveWeightProfile=(Profile=MWP_MimicBeacon, fCoverWeight=0.5f, fDistanceWeight=1.0f, fFlankingWeight=0.5f, fEnemyVisWeight=0.2f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=0.2f, fPriorityDistWeight=5.0f, fCloseModifier=2.0f, fFarModifier=0.5f) 
+m_arrMoveWeightProfile=(Profile=MWP_MimicBeacon, fCoverWeight=1.7f, fDistanceWeight=5.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=1.0f, fPriorityDistWeight=5.0f, fCloseModifier=2.0f, fFarModifier=0.5f)

; making units consider cover when meleeing
;-m_arrMoveWeightProfile=(Profile=MWP_Melee, fCoverWeight=0.1f, fDistanceWeight=1.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f, fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)  
;-m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.2f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;-m_arrMoveWeightProfile=(Profile=MWP_MeleeAggressive, fCoverWeight=0.1f, fDistanceWeight=2.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;
;+m_arrMoveWeightProfile=(Profile=MWP_Melee, fCoverWeight=0.4f, fDistanceWeight=1.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f, fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)  
;+m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.6f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;+m_arrMoveWeightProfile=(Profile=MWP_MeleeAggressive, fCoverWeight=0.2f, fDistanceWeight=2.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)


; +++ AOE Profiles; don't delete any of the lines, they are needed for AI targeting. If you know what you are doing, you can tweak some of the values
+AoEProfiles=( Profile=GrenadeSingleProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=SmokeScreenProfile,  Ability=ThrowGrenade, bTargetSelf=True, MinTargets=0)
+AoEProfiles=( Profile=FirebreathProfile, Ability=Firebreath, bIgnoreSelfDamage=True, MinTargets=2, bRequireLoS=1) 
+AoEProfiles=( Profile=ChrysSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=True, MinTargets=1, bRequireLoS=1) ; ChrysSpit is a singletarget ability. So don't change MinTargets on this one...
+AoEProfiles=( Profile=SmokeRainProfile,  Ability=SmokeRain, bTargetAllies=True, bTargetEnemy=false, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=SmokeGrenadeProfile,  Ability=ThrowGrenade, bTargetAllies=True, bTargetEnemy=false, bUsePrecomputePath=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherProfile_prio, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherProfile_norm, Ability=RocketLauncher, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=RocketLauncherProfile_aggro, Ability=RocketLauncher, bUsePrecomputePath=1, MinTargets=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadeLauncherProfile_prio, Ability=LaunchGrenade, bUsePrecomputePath=1, MinTargets=3, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_norm, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_aggro, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=BlazingPinionsProfile_aggro, Ability=BlazingPinionsStage1, MinTargets=1, bFailOnObjectiveFire=False)

; adding the requirement for LoS to vanilla AoE profiles
-AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1)
-AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1) 
-AoEProfiles=( Profile=GrenadePanickedProfile,  Ability=ThrowGrenade, bTargetAllies=1, bTargetCivilians=1, bUsePrecomputePath=1, MinTargets=1, bRequirePotentialTarget=1)
-AoEProfiles=( Profile=GrenadeMindControlledProfile,  Ability=ThrowGrenade, bTargetSelf=1, bUsePrecomputePath=1)
-AoEProfiles=( Profile=AcidBlobProfile, Ability=AcidBlob, bFailOnFriendlyFire=1, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1)
-AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles)
-AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1)
-AoEProfiles=( Profile=PsiRiftProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)
-AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, MinTargets=1)
-AoEProfiles=( Profile=NullLanceProfile, Ability=NullLance, MinTargets=1, bRequirePotentialTarget=1) 
-AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=MountainMistPreferred, Ability=ThrowGrenade, bFailOnObjectiveFire=false, bUsePrecomputePath=1) 
-AoEProfiles=( Profile=MountainMistAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=1) 
-AoEProfiles=( Profile=GrenadeProfileAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1)

+AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadePanickedProfile,  Ability=ThrowGrenade, bTargetAllies=1, bTargetCivilians=1, bUsePrecomputePath=1, MinTargets=1, bRequirePotentialTarget=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeMindControlledProfile,  Ability=ThrowGrenade, bTargetSelf=1, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=AcidBlobProfile, Ability=AcidBlob, bFailOnFriendlyFire=1, bIgnoreSelfDamage=1, bRequireLoS=1)
+AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, bRequireLoS=1)
+AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles, bRequireLoS=1)
+AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=PsiRiftProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False, bRequireLoS=1)
+AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=NullLanceProfile, Ability=NullLance, MinTargets=1, bRequirePotentialTarget=1, bRequireLoS=1) 
+AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true, bRequireLoS=1)
+AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true, bRequireLoS=1)
+AoEProfiles=( Profile=MountainMistPreferred, Ability=ThrowGrenade, bFailOnObjectiveFire=false, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=MountainMistAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadeProfileAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RemoteStartProfile, Ability=RemoteStart, MinTargets=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)


[XComGame.X2AIBTBehaviorTree]
; new NodeType specifiers defined here.  i.e. NodeType=AddConditions, defined in class X2AIBT_AdditionalAIConditions
+CustomNodes=(NodeTypeString="AddCondition", ExtendsFromType="Condition", ClassName="ABetterADVENTWaroftheChosen.X2AIBT_AdditionalAIConditions")
+CustomNodes=(NodeTypeString="AddAction", ExtendsFromType="Action", ClassName="ABetterADVENTWaroftheChosen.X2AIBT_AdditionalAIActions")

; Only select destructible targets with at least one Enemy in the blast radius that is not The Lost or a minumum of 3 Lost in the blast radius 
; And there are no friendlies in the blast radius
; ATT AI MODDERS: TryStandardShotOnDestructible IS THE ONLY BEHAVIOR TO ADD TO YOUR BT TREES FOR TARGETING DESTRUCTIBLES
+Behaviors=(BehaviorName=TryStandardShotOnDestructible, NodeType=Selector, Child[0]=ShootDestructibleIfAvailable)

+Behaviors=(BehaviorName=ShootDestructibleIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectDestructibleTargetForStandardShot, Child[2]=SelectAbility-StandardShot)
; If multiple opportunities for the AI to blow enemies up, then randomly select one
+Behaviors=(BehaviorName=SelectDestructibleTargetForStandardShot, NodeType=Sequence, Child[0]=SetDestructibleTargetStack-StandardShot, Child[1]=GenericSelectTargetRandomly, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SetDestructibleTargetStack-StandardShot, NodeType=AddAction)



; The following lines apply the Better AI decision trees to vanilla units. 
; --- Vanilla Trooper
-Behaviors=(BehaviorName="AdventTrooper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="AdventTrooper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Captain
-Behaviors=(BehaviorName="AdventCaptain::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="AdventCaptain::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Stunlancer - Disabled. Stunlancers are now by default back to their suicidal melee self.
;-Behaviors=(BehaviorName="AdventStunLancer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdventSL_RedAlert, Child[3]=GenericAlertHandler)
;+Behaviors=(BehaviorName="AdventStunLancer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvStunLancer_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Shieldbearer
-Behaviors=(BehaviorName="AdventShieldBearer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvShieldBearer_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="AdventShieldBearer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvShieldBearer_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla MEC
-Behaviors=(BehaviorName="AdventMEC::CharacterRoot", NodeType=Selector, Child[0]=MecMk1Branch, Child[1]=AdvMECMk2_Root)
+Behaviors=(BehaviorName="AdventMEC::CharacterRoot", NodeType=Selector, Child[0]=MecMk1Branch_ABA, Child[1]=AdvMECMk2_ABA_Root)
; --- Vanilla Avatar
-Behaviors=(BehaviorName="AdventPsiWitch::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PsiWitchRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="AdventPsiWitch::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PsiWitch_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Turret
-Behaviors=(BehaviorName="AdventTurret::CharacterRoot", NodeType=Selector, Child[0]=Turret_RedAlert, Child[1]=SkipMove) ; , Child[1]=TryOverwatch)
+Behaviors=(BehaviorName="AdventTurret::CharacterRoot", NodeType=Selector, Child[0]=Turret_ABA_RedAlert, Child[1]=SkipMove) ; , Child[1]=TryOverwatch)
; --- Vanilla Andromedon
-Behaviors=(BehaviorName="Andromedon::CharacterRoot", NodeType=Selector, Child[0]=AndromedonRobotBranch, Child[1]=AndromedonRoot)
+Behaviors=(BehaviorName="Andromedon::CharacterRoot", NodeType=Selector, Child[0]=AndromedonRobotBranch, Child[1]=Andromedon_ABA_Root)
; --- Vanilla Archon
-Behaviors=(BehaviorName="Archon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ArchonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Archon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Archon_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Berserker
-Behaviors=(BehaviorName="Berserker::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement, Child[2]=BerserkerMeleeRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Berserker::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement_NoDevice, Child[2]=BerserkerMeleeRedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Codex
-Behaviors=(BehaviorName="Cyberus::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=CodexRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Cyberus::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Codex_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Muton
-Behaviors=(BehaviorName="Muton::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Muton::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Muton_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Sectoid
-Behaviors=(BehaviorName="Sectoid::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidRedAlert, Child[3]=SectoidNoEnemySightedMove)
+Behaviors=(BehaviorName="Sectoid::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectoid_ABA_RedAlert, Child[3]=SectoidNoEnemySightedMove)
; --- Vanilla Viper
-Behaviors=(BehaviorName="Viper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Viper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Viper_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Sectopod
-Behaviors=(BehaviorName="Sectopod::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectopodRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Sectopod::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectopod_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla CounterOp
-Behaviors=(BehaviorName="AdventCounterOp::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCounterOp_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="AdventCounterOp::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCounterOp_ABA_RedAlert, Child[3]=GenericAlertHandler)
; --- Vanilla Priest
-Behaviors=(BehaviorName="AdventPriest::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PriestRedOrangeAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName="AdventPriest::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Priest_ABA_RedOrangeAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
; --- Vanilla Purifier
-Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PurifierRedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Purifier_ABA_RedFirstAction, Child[3]=Purifier_ABA_RedLastAction, Child[4]=GenericAlertHandler, Child[5]=SkipMove)

; --- Vanilla Chryssalid
-Behaviors=(BehaviorName="Chryssalid::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)
+Behaviors=(BehaviorName="Chryssalid::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=Chryssalid_ABA_Root)
; --- Vanilla Spectre
-Behaviors=(BehaviorName="Spectre::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SpectreRedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName="Spectre::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Spectre_ABA_RedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)


; +++ Equivs

+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=StandardMeleeLifeLeech, EquivalentAbilityName[1]=ChryssalidSlashM1, EquivalentAbilityName[2]=ChryssalidSlashM2, EquivalentAbilityName[3]=ChryssalidSlashM3, EquivalentAbilityName[4]=ChryssalidSlashM4)
+EquivalentAbilities=( KeyName=StandardShot, EquivalentAbilityName[0]=AcidShot)

+EquivalentAbilities=( KeyName=ChryssalidSlash, EquivalentAbilityName[0]=ChryssalidSlashM1,  EquivalentAbilityName[1]=ChryssalidSlashM2, EquivalentAbilityName[2]=ChryssalidSlashM3, EquivalentAbilityName[3]=ChryssalidSlashM4)
+EquivalentAbilities=( KeyName=PsiReanimation, EquivalentAbilityName[0]=Puppeteering, EquivalentAbilityName[1]=PuppeteeringM3, EquivalentAbilityName[2]=GatekeepersCall)
+EquivalentAbilities=( KeyName=Bind, EquivalentAbilityName[0]=BoaBind, EquivalentAbilityName[1]=PrimeBind)
+EquivalentAbilities=( KeyName=MindSpin, EquivalentAbilityName[0]=AdvMindSpinM1, EquivalentAbilityName[1]=AdvMindSpinM2, EquivalentAbilityName[2]=AdvMindSpinM3, EquivalentAbilityName[3]=SectoidMC, EquivalentAbilityName[4]=PsiMindControl, EquivalentAbilityName[5]=LostMark)
+EquivalentAbilities=( KeyName=PoisonSpit, EquivalentAbilityName[0]=FireSpit)
+EquivalentAbilities=( KeyName=AidProtocol, EquivalentAbilityName[0]=AdvAidProtocol)
+EquivalentAbilities=( KeyName=GremlinHeal, EquivalentAbilityName[0]=AdvGremlinHeal)
+EquivalentAbilities=( KeyName=GremlinRepair, EquivalentAbilityName[0]=AdvGremlinRepair)
+EquivalentAbilities=( KeyName=AcidBlob, EquivalentAbilityName[0]=AndromedonFirebomb, EquivalentAbilityName[1]=AcidBlobM4)
+EquivalentAbilities=( KeyName=MicroMissiles, EquivalentAbilityName[0]=AcidRain, EquivalentAbilityName[1]=FlashRain)
+EquivalentAbilities=( KeyName=DistressCall, EquivalentAbilityName[0]=DistressCallM1, EquivalentAbilityName[1]=DistressCallM2, EquivalentAbilityName[2]=DistressCallM3)
+EquivalentAbilities=( KeyName=GetOverHere, EquivalentAbilityName[0]=BoaGetOverHere, EquivalentAbilityName[1]=PrimeGetOverHere, EquivalentAbilityName[2]=KingGetOverHere)
+EquivalentAbilities=( KeyName=BlazingPinionsStage1, EquivalentAbilityName[0]=ArchonKingBlazingPinionsStage1)
+EquivalentAbilities=( KeyName=NullLance, EquivalentAbilityName[0]=SpinLance)
+EquivalentAbilities=( KeyName=PsiBombStage1, EquivalentAbilityName[0]=BomberPsiBombStage1)
+EquivalentAbilities=( KeyName=HunterGrapple, EquivalentAbilityName[0]=SkirmisherGrapple)


; +++ Scamper Trees

+Behaviors=(BehaviorName=ScamperRoot_Codex_Bomber, NodeType=Selector,       Child[0]=TryPsiBomb,      Child[1]=CounterBeaglerushManeuver,       Child[2]=TryTeleportDefensive,       Child[3]=MoveFlankingUnsafe,       Child[4]=MoveStandardWithLoSUnsafe,       Child[5]=MoveStandardUnsafe,       Child[6]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_CodexM4, NodeType=Selector,       Child[0]=TryCloneM4,       Child[1]=CounterBeaglerushManeuver,       Child[2]=TryTeleportDefensive,       Child[3]=MoveFlankingUnsafe,       Child[4]=MoveStandardWithLoSUnsafe,       Child[5]=MoveStandardUnsafe,       Child[6]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Codex_Splitter, NodeType=Selector,       Child[0]=CounterBeaglerushManeuver,       Child[1]=TryTeleportDefensive,       Child[2]=MoveFlankingUnsafe,       Child[3]=MoveStandardWithLoSUnsafe,       Child[4]=MoveStandardUnsafe,       Child[5]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Codex_Teleport, NodeType=Selector,       Child[0]=CounterBeaglerushManeuver,       Child[1]=TryTeleportDefensive,       Child[2]=MoveFlankingUnsafe,       Child[3]=MoveStandardWithLoSUnsafe,       Child[4]=MoveStandardUnsafe,       Child[5]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Archon_Pinions, NodeType=Selector,       Child[0]=TryBlazingPinions_aggro, Child[1]=CounterBeaglerushManeuver,       Child[2]=MoveNoCoverUnsafe,       Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Archon_Melee, NodeType=Selector,       Child[0]=TryFrenzyTrigger, Child[1]=CounterBeaglerushManeuver,       Child[2]=MoveNoCoverUnsafe,       Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Archon_Sentinel, NodeType=Selector,       Child[0]=CounterBeaglerushManeuver,       Child[1]=TryOverwatch,       Child[2]=MoveNoCoverUnsafe,       Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Gatecaller, NodeType=Selector,       Child[0]=TryAnimaInversionCorpses, Child[1]=CounterBeaglerushManeuver,       Child[2]=MoveNoCoverUnsafe,       Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_AutoDoc, NodeType=Selector,       Child[0]=TrySmoke   , Child[1]=TryGremlinHeal,  Child[2]=CounterBeaglerushManeuver,       Child[3]=NCMoveFlanking,       Child[4]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Distress, NodeType=Selector, Child[0]=TryDistress, Child[1]=CounterBeaglerushManeuver, Child[2]=MoveDefensive)
+Behaviors=(BehaviorName=ScamperRoot_Boa, NodeType=Selector, Child[0]=TryGetOverHere, Child[1]=CounterBeaglerushManeuver, Child[2]=MoveDefensive)
+Behaviors=(BehaviorName=ScamperRoot_Smoke, NodeType=Selector, Child[0]=TrySmoke, Child[1]=CounterBeaglerushManeuver, Child[2]=MoveNoCoverUnsafe)
+Behaviors=(BehaviorName=ScamperRoot_SectopodPrime, NodeType=Selector, Child[0]=TryStandUp, Child[1]=ScamperRoot_NoCover)
+Behaviors=(BehaviorName=ScamperRoot_StealthOnReveal, NodeType=Selector, Child[0]=TryStealth, Child[1]=ScamperRoot_NoCover)
+Behaviors=(BehaviorName=ScamperRoot_AdvDrone, NodeType=Selector,       Child[0]=ABA_DroneHealIfAvailable  , Child[1]=ABA_TryMoveForDroneHeal,  Child[2]=NCMoveFlanking,       Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Skirmisher, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=MaybeGrapple30, Child[2]=GrappleWhenUnsafe, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=SkipMove)

; +++ PRIME REACTIONS +++
; These are the AI branches that are called from the reaction abilities. Whenever a Prime is shot, this branch will be called.
; Prime Move/Shoot Logic. Makes a choice between moving and shooting depending on highest chances to hit. At least that's the plan, currently doesn't work -.-
; First the version for units that don't use cover 
+Behaviors=(BehaviorName=PrimeMoveOrShootNoCover, NodeType=Selector,     Child[0]=TakePriorityShots,      Child[1]=PMOSNClowCTH,      Child[2]=PMOSNCmidCTH,      Child[3]=PMOSNChighCTH,      Child[4]=TryShootOrReload,      Child[5]=MoveMelee)
+Behaviors=(BehaviorName=PMOSNClowCTH, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=MoveMelee) 
+Behaviors=(BehaviorName=PMOSNCmidCTH, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=MoveAggressiveFlank, Child[2]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=PMOSNChighCTH, NodeType=Sequence, Child[0]=TryShootOrReloadOrOverwatch_ABA, Child[1]=MoveAggressiveFlank)

; And the one for cover users
+Behaviors=(BehaviorName=PrimeMoveOrShoot, NodeType=Selector,     Child[0]=TakePriorityShots,      Child[1]=PMOSlowCTH,      Child[2]=PMOSmidCTH,      Child[3]=PMOShighCTH,      Child[4]=TryShootOrReload,      Child[5]=MoveAggressive)
+Behaviors=(BehaviorName=PMOSlowCTH, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=MoveAggressive)
+Behaviors=(BehaviorName=PMOSmidCTH, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=MoveAggressiveFlank, Child[2]=TryShootOrReload) 
+Behaviors=(BehaviorName=PMOShighCTH, NodeType=Sequence, Child[0]=TryShootOrReload, Child[1]=MoveAggressiveFlank) 
; On Resistance turn, don't react 
+Behaviors=(BehaviorName=SkipOnResistanceTurn, NodeType=Sequence, Child[0]=IsActiveTeam-eTeam_Resistance, Child[1]=SkipMove)
; --- Sectopod Prime
+Behaviors=(BehaviorName=SectopodReaction, NodeType=Selector, Child[0]=SkipOnResistanceTurn,     Child[1]=MimicBeaconBehavior, Child[2]=SectopodCannonCharging,      Child[3]=PrimeMoveOrShootNoCover,      Child[4]=HuntEnemy)
; --- Sectoid Primes
+Behaviors=(BehaviorName=SectoidReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,      Child[3]=ShootWhenFlanking,  Child[4]=TryPsiReanimationOrMindSpinOption_ABA,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=HuntEnemyWithCover,      Child[7]=MoveDefensive)
+Behaviors=(BehaviorName=SectoidTrooperReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,  Child[3]=PrimeMoveOrShoot,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=SectoidCommanderReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior, Child[3]=ShootWhenFlanking,      Child[4]=TryMindSpinOption,      Child[5]=TryCleanse,       Child[6]= TryPsiReanimation, Child[7]=TryShootOrReloadOrOverwatch_ABA,      Child[8]=HuntEnemyWithCover,      Child[9]=Fallback)
+Behaviors=(BehaviorName=SectoidPuppeteerReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,      Child[3]=ShootWhenFlanking,  Child[4]=TryPsiReanimation,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=MoveDefensive)
; --- Muton Prime
+Behaviors=(BehaviorName=MutonReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,      Child[3]=ShootWhenFlanking,  Child[4]=TryGrenade_Aggressive,      Child[5]=TryBayonet,  Child[6]=PrimeMoveOrShoot,      Child[7]=HuntEnemyWithCover)
; --- Archon Prime
+Behaviors=(BehaviorName=ArchonReaction, NodeType=Selector, Child[0]=SkipOnResistanceTurn,     Child[1]=MimicBeaconBehavior,     Child[2]=PrimeMoveOrShootNoCover,      Child[3]=HuntEnemy)
; --- Viper Prime, actually has two Reaction abilities. First one triggers on being hit, second one after her tongue grab.
+Behaviors=(BehaviorName=ViperReaction, NodeType=Selector,     Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,     Child[3]=ShootWhenFlanking,      Child[4]=TryPoisonSpit,      Child[5]=TryGetOverHere,      Child[6]=PrimeMoveOrShoot,      Child[7]=HuntEnemy)
+Behaviors=(BehaviorName=ViperGrabAndRun, NodeType=Selector,     Child[0]=FallbackUnsafe, Child[1]=SkipOnResistanceTurn,     Child[2]=MoveDefensive,     Child[3]=DoIfFlankedMove)
; --- Gatekeeper Prime
+Behaviors=(BehaviorName=GatekeeperReaction, NodeType=Selector, Child[0]=SkipOnResistanceTurn,     Child[1]=MimicBeaconBehavior,      Child[2]=PrimeMoveOrShootNoCover,      Child[3]=HuntEnemy)
+Behaviors=(BehaviorName=GatekeepersCallReaction, NodeType=Selector, Child[0]=TryPsiReanimation,     Child[1]=GatekeeperReaction)
; --- Codex Prime
+Behaviors=(BehaviorName=CodexReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,      Child[3]=ShootWhenFlanking,      Child[4]=TryPersonalShield_Codex,       Child[5]=TryTeleportDefensive, Child[6]=PrimeMoveOrShoot,      Child[7]=HuntEnemy  )
; --- Spectre Prime
+Behaviors=(BehaviorName=SpectreReaction, NodeType=Selector,      Child[0]=DoIfFlankedVanish,      Child[1]=DoIfFlankedMove, Child[2]=SkipOnResistanceTurn,      Child[3]=SpectreRandomReaction,      Child[4]=ShootWhenFlanking,       Child[5]=PrimeMoveOrShoot,      Child[6]=HuntEnemy  )
+Behaviors=(BehaviorName=DoIfFlankedVanish, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=IsAbilityAvailable-Vanish, Child[2]=SelectAbility-Vanish)
+Behaviors=(BehaviorName=SpectreRandomReaction, NodeType=RandSelector, Child[0]=TryShadowbind, Param[0]=50, Child[1]=TryHorror, Param[1]=50)
; --- Andromedon Prime
+Behaviors=(BehaviorName=AndromedonReaction, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn,     Child[2]=MimicBeaconBehavior,      Child[3]=TryAcidBlob,      Child[4]=PrimeMoveOrShoot)
+Behaviors=(BehaviorName=AndromedonRobotReaction, NodeType=Selector, Child[0]=SkipOnResistanceTurn,     Child[1]=MimicBeaconBehavior,      Child[2]=TryStandardMeleeUnsafe, Child[3]=MoveMeleeFANATICUnsafe, Child[4]=HuntEnemyUnsafe)
; --- Berserker and Firestarter Prime
+Behaviors=(BehaviorName=BerserkerRush, NodeType=Selector, Child[0]=SkipOnResistanceTurn,     Child[1]=MimicBeaconBehavior,      Child[2]=TryFirebreath,    Child[3]=BerserkerReactionMelee,      Child[4]=MoveMeleeDashFANATICUnsafe,      Child[5]=HuntEnemyUnsafe)
+Behaviors=(BehaviorName=BerserkerReactionMelee, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SelectTargetForStandardMelee_BR, Child[2]=SelectAbility-StandardMelee)
+Behaviors=(BehaviorName=SelectTargetForStandardMelee_BR, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectBestTargetForStandardMelee_BR, Child[2]=HasValidTarget-StandardMelee)
+Behaviors=(BehaviorName=SelectBestTargetForStandardMelee_BR, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget_BR)
+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget_BR, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian_Succ, Child[4]=TargetScoreAlly_Succ, Child[5]=SSCustomMeleeTargetScore, Child[6]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetScoreCivilian_Succ, NodeType=Successor, Child[0]=TargetScoreCivilian_BR)
+Behaviors=(BehaviorName=TargetScoreCivilian_BR, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=TargetScoreAlly_Succ, NodeType=Successor, Child[0]=TargetScoreAlly_BR)
+Behaviors=(BehaviorName=TargetScoreAlly_BR, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=AddToTargetScore_-1000)
; --- Muton Champion (Not actually a prime, but his ability works similar)
+Behaviors=(BehaviorName=Reaction_DefensiveTactics, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=SkipOnResistanceTurn, Child[2]=TryPersonalShield_ABA, Child[3]=TryWarCryOnFewTargets_ABA, Child[4]=MoveDefensive)


; +++ Vanilla Adjustments

; Lowering chance to overwatch the VIP
-Behaviors=(BehaviorName=ConsiderTakingOverwatchVIP, NodeType=Sequence, Child[0]=VIPVisible, Child[1]=RandOverwatch75_15)
+Behaviors=(BehaviorName=ConsiderTakingOverwatchVIP, NodeType=Sequence, Child[0]=VIPVisible, Child[1]=RandOverwatch30)

; Lowering chance to overwatch the Evac
-Behaviors=(BehaviorName=ConsiderTakingOverwatchEvac, NodeType=Sequence, Child[0]=EvacInRangeAndEnemyVisible, Child[1]=RandOverwatch100_75)
+Behaviors=(BehaviorName=ConsiderTakingOverwatchEvac, NodeType=Sequence, Child[0]=EvacInRangeAndEnemyVisible, Child[1]=RandOverwatch75_50)
+Behaviors=(BehaviorName=RandOverwatch75_50, NodeType=Selector, Child[0]=RandFirstOverwatch75, Child[1]=RandSecondOverwatch50)
+Behaviors=(BehaviorName=RandSecondOverwatch50, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatch50)

; Removing some units from checking for ProtectDeviceTargets
-Behaviors=(BehaviorName=HasValidProtectDeviceTarget, NodeType=Sequence, Child[0]=HasPriorityTargetObject, Child[1]=PriorityTargetNotAttackedThisTurn )
+Behaviors=(BehaviorName=HasValidProtectDeviceTarget, NodeType=Sequence, Child[0]=HasPriorityTargetObject, Child[1]=AllowedToShootDevices, Child[2]=PriorityTargetNotAttackedThisTurn )
; Which ones are removed?
+Behaviors=(BehaviorName=TemplateNameIs-AdvDroneM1, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnAdvDroneM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvDroneM1)
+Behaviors=(BehaviorName=TemplateNameIs-AdvDroneM2, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnAdvDroneM2, NodeType=Inverter, Child[0]=TemplateNameIs-AdvDroneM2)
+Behaviors=(BehaviorName=TemplateNameIs-Berserker, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserker, NodeType=Inverter, Child[0]=TemplateNameIs-Berserker)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerFire, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerFire, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerFire)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerM4, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerM4, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerM4)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerFireM4, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerFireM4, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerFireM4)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerQueen, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerQueen, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerQueen)
+Behaviors=(BehaviorName=AllowedToShootDevices, NodeType=Inverter, Child[0]=NotAllowedToShootDevices)
+Behaviors=(BehaviorName=NotAllowedToShootDevices, NodeType=Sequence, Child[0]=TemplateNameIs-BerserkerQueen, Child[1]=TemplateNameIs-AdvDroneM1, Child[2]=TemplateNameIs-AdvDroneM2, Child[3]=TemplateNameIs-Berserker, Child[4]=TemplateNameIs-BerserkerFire, Child[5]=TemplateNameIs-BerserkerM4, Child[6]=TemplateNameIs-BerserkerFireM4)

; --- Prefer Hunker on Panic
; Changes the panic AI to "Move, then hunker" way more often than in vanilla. If you don't like this change, then delete/comment the following two lines.
-Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector,      Child[0]=ShootRandomEnemyForPanic, Param[0]=5,      Child[1]=TryPanickedGrenadeToss, Param[1]=1,      Child[2]=DoCower, Param[2]=2)
+Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector,      Child[0]=ShootRandomEnemyForPanic, Param[0]=2,      Child[1]=TryPanickedGrenadeToss, Param[1]=1,      Child[2]=DoCower, Param[2]=7)

; --- Reroute the vanilla "Move When Flanked" behavior to the more detailed reactions which include counterflanking, desperation shots, point blank counterfire
-Behaviors=(BehaviorName=DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedMoveSelector)
+Behaviors=(BehaviorName=DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedActionSelector_ABA)

; --- Suppress closest when only bad shots
+Behaviors=(BehaviorName=MaybeSuppressClosestOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=RollForSuppress)
+Behaviors=(BehaviorName=RollForSuppress, NodeType=RandFilter, Child[0]=TrySuppressClosest, Param[0]=50)

; --- Remove Lost as viable suppression targets
-Behaviors=(BehaviorName=ScoreUnsuppressedByHitChanceValue, NodeType=Sequence, Child[0]=TargetIsNotSuppressed, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=TargetScoreByHitChanceValue-1)
+Behaviors=(BehaviorName=ScoreUnsuppressedByHitChanceValue, NodeType=Sequence, Child[0]=TargetIsNotSuppressed, Child[1]=TargetScoreInvalidateLost_ABA, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreByHitChanceValue-1)
-Behaviors=(BehaviorName=EvaluateSuppressionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreUnsuppressedByClosestDistance, Child[2]=TargetScoreInvalidateCivilians, Child[3]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluateSuppressionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreUnsuppressedByClosestDistance, Child[2]=TargetScoreInvalidateLost_ABA, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=TargetScoreInvalidateLost_ABA, NodeType=Selector, Child[0]=ScoreTargetOutIfLost_ABA, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetOutIfLost_ABA, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_-1000)

; --- Remove Lost as viable targets for Tonguepull
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression);
+Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=IsTargetTeam-eTeam_TheLost)
-Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=TargetScoreInvalidateLost_ABA, Child[4]=SSTargetScoreInvalidTonguePullTargets, Child[5]=UpdateBestTarget)

; --- Standardmelee avoids Lost
;-Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)
;+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=EncourageTargetNonLost, Child[5]=DiscourageTargetLost, Child[6]=SSCustomMeleeTargetScore, Child[7]=UpdateBestTarget)
;+Behaviors=(BehaviorName=DiscourageTargetLost, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_1)
;+Behaviors=(BehaviorName=EncourageTargetNonLost, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=AddToTargetScore_50)

-Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=EncourageTargetNonLost, Child[5]=DiscourageTargetLost, Child[6]=SSCustomMeleeTargetScore, Child[7]=UpdateBestTarget)
+Behaviors=(BehaviorName=DiscourageTargetLost, NodeType=Successor, Child[0]=ScoreIfLost)
+Behaviors=(BehaviorName=EncourageTargetNonLost, NodeType=Successor, Child[0]=ScoreIfNotLost)
+Behaviors=(BehaviorName=ScoreIfLost, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_1)
+Behaviors=(BehaviorName=ScoreIfNotLost, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=AddToTargetScore_50)  

; --- Stop Terror/Executioner units from ignoring cover
-Behaviors=(BehaviorName=TryTerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ResetDestinationSearch, Child[3]=SetCiviliansAsEnemiesInMoveCalculation, Child[4]=SetNoCoverMovement, Child[5]=FindDestination-MWP_Fanatic, Child[6]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=TerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetCiviliansAsEnemiesInMoveCalculation, Child[3]=SetNoCoverMovement, Child[4]=FindDestination-MWP_Fanatic, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryTerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ResetDestinationSearch, Child[3]=SetCiviliansAsEnemiesInMoveCalculation, Child[4]=FindDestination-MWP_Aggressive, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetCiviliansAsEnemiesInMoveCalculation, Child[3]=FindDestination-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)

; +++ Conditions 
; Effects on Target
+Behaviors=(BehaviorName=TargetAffectedByEffect-Overwatch, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotBound, NodeType=Inverter, Child[0]=TargetAffectedByEffect-Bind)
+Behaviors=(BehaviorName=TargetAffectedByEffect-DLC_3SacrificeShield, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotSacrificeProtected, NodeType=Inverter, Child[0]=TargetAffectedByEffect-DLC_3SacrificeShield)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Confused, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Panicked, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Berserk, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Shattered, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Dazed, NodeType=Condition)

; Effects on self
+Behaviors=(BehaviorName=AffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Suppression, NodeType=Condition)
+Behaviors=(BehaviorName=NotSuppressed, NodeType=Inverter, Child[0]=AffectedByEffect-Suppression)
+Behaviors=(BehaviorName=AffectedByEffect-Stealth, NodeType=Condition)
+Behaviors=(BehaviorName=NotStealthed, NodeType=Inverter, Child[0]=AffectedByEffect-Stealth)
+Behaviors=(BehaviorName=HasFullHP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="100%")
+Behaviors=(BehaviorName=IsDodgy, NodeType=StatCondition, Param[0]=eStat_Dodge, Param[1]=">=", Param[2]="20")
+Behaviors=(BehaviorName=AffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-EnergyShieldEffect, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=NotWarCried, NodeType=Inverter, Child[0]=AffectedByEffect-Muton_WarCry)

; Things in sight
+Behaviors=(BehaviorName=MoreThanTwoEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=LessThanTwoVisibleOverwatchers, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="<", Param[2]="2")
+Behaviors=(BehaviorName=LessThanTwoVisibleSuppressors, NodeType=StatCondition, Param[0]=SuppressorCount, Param[1]="<", Param[2]="2")
; Hit Chance based Conditions
+Behaviors=(BehaviorName=AllHitChancesBelow10, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="10")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow10, NodeType=Inverter, Child[0]=AllHitChancesBelow10)
+Behaviors=(BehaviorName=AllHitChancesBelow25, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="25")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow25, NodeType=Inverter, Child[0]=AllHitChancesBelow25)
+Behaviors=(BehaviorName=AllHitChancesBelow50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow50, NodeType=Inverter, Child[0]=AllHitChancesBelow50)
+Behaviors=(BehaviorName=AllHitChancesBelow75, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="75")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow75, NodeType=Inverter, Child[0]=AllHitChancesBelow75)
+Behaviors=(BehaviorName=AllHitChancesBelow90, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="90")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow90, NodeType=Inverter, Child[0]=AllHitChancesBelow90)
; Target specific Hit Chance Conditions
; First two are already in Vanilla, must stay commented out!
;Behaviors=(BehaviorName=TargetHitChanceLow, NodeType=Condition)   <-- CTH < 40
;Behaviors=(BehaviorName=TargetHitChanceHigh, NodeType=Condition)  <-- CTH > 80
+Behaviors=(BehaviorName=TargetHitChanceNotLow, NodeType=Inverter, Child[0]=TargetHitChanceLow) ; <-- CTH > 40
+Behaviors=(BehaviorName=TargetHitChanceNotHigh, NodeType=Inverter, Child[0]=TargetHitChanceHigh) ; <-- CTH < 80
; Mission Type: Ambush
+Behaviors=(BehaviorName=IsMissionOfType-CovertEscape, NodeType=Condition)
+Behaviors=(BehaviorName=NotAmbushMission, NodeType=Inverter, Child[0]=IsMissionOfType-CovertEscape)
; Active Team
;first two are from vanilla, for reference
;Behaviors=(BehaviorName=IsActiveTeam-eTeam_XCom, NodeType=Condition)
;Behaviors=(BehaviorName=NotActiveTeamXCom, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_XCom)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_TheLost, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamTheLost, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_TheLost)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_Alien, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamAlien, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_Alien)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_Resistance, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamResistance, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_Resistance)

; +++ Randomizers
; Random Overwatches. RandOverwatch75 and RO15 already exist in Vanillla
+Behaviors=(BehaviorName=RandOverwatch30, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=30)
+Behaviors=(BehaviorName=RandOverwatch50, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=50)
+Behaviors=(BehaviorName=RandOverwatch90, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=90)

; +++ The Overwatch Override
; Turns Attacks into Overwatches (with random roll, based on hit chance)
; Use Overwatch Override only on enemy turn - we don't want enemies to go into Overwatch when triggered by Prime reactions
+Behaviors=(BehaviorName=OverwatchOverride, NodeType=Sequence, Child[0]=NotActiveTeamXCom, Child[1]=OverwatchOverrideStart)
; ++ Forking Overwatch chances by Hit Chance
+Behaviors=(BehaviorName=OverwatchOverrideStart, NodeType=Selector, Child[0]=OverwatchOverride10, Child[1]=OverwatchOverride25, Child[2]=OverwatchOverride50, Child[3]=OverwatchOverride75, Child[4]=OverwatchOverrideNVE)
+Behaviors=(BehaviorName=OverwatchOverride10, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow10, Child[2]=RandOverwatchAtCTH10)
+Behaviors=(BehaviorName=OverwatchOverride25, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow25, Child[2]=NOTAllHitChancesBelow10, Child[3]=RandOverwatchAtCTH25)
+Behaviors=(BehaviorName=OverwatchOverride50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow50, Child[2]=NOTAllHitChancesBelow25, Child[3]=RandOverwatchAtCTH50)
+Behaviors=(BehaviorName=OverwatchOverride75, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow75, Child[2]=NOTAllHitChancesBelow50, Child[3]=RandOverwatchAtCTH75)
+Behaviors=(BehaviorName=OverwatchOverrideNVE, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=NotAmbushMission, Child[2]=RandOverwatch75)
; ++ Forking Overwatch Chances by number of other Overwatchers
; CTH <10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH10, Child[1]=RandSecondOverwatchAtCTH10, Child[2]=RandThirdOverwatchAtCTH10)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH10, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH10, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH10Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH10, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10Third)
; CTH <25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH25, Child[1]=RandSecondOverwatchAtCTH25, Child[2]=RandThirdOverwatchAtCTH25)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH25, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH25, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH25Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH25, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25Third)
; CTH <50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH50, Child[1]=RandSecondOverwatchAtCTH50, Child[2]=RandThirdOverwatchAtCTH50)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH50, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH50, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH50Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH50, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50Third)
; CTH <75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH75, Child[1]=RandSecondOverwatchAtCTH75, Child[2]=RandThirdOverwatchAtCTH75)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH75, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH75, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH75Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH75, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75Third)

; The following lines are the percentages for Overwatch that are used by the hitchance based Overwatch Override.
; First/Second/Third refers to the number of Overwatchers already around. 

; CTH<10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10First, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=90)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Second, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=75)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Third, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=50)
; CTH<25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25First, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=60)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Second, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=50)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Third, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=30)
; CTH<50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50First, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=15)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Second, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=10)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Third, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=3)
; CTH<75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75First, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Second, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Third, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)

; if the Overwatch Override triggers based on the random chance above, there is a second chance based check that can make the unit go into Hunker instead of Overwatch.
; There are 4 different probabilties for the Overwatch/Hunker chance and which one is used depends on the CTH bracket we just came from.

+Behaviors=(BehaviorName=TryOverwatch10MaybeHunker90, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=10,      Child[1]=TryCower, Param[1]=90)
+Behaviors=(BehaviorName=TryOverwatch30MaybeHunker70, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=30,      Child[1]=TryCower, Param[1]=70)
+Behaviors=(BehaviorName=TryOverwatch40MaybeHunker60, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=40,      Child[1]=TryCower, Param[1]=60)
+Behaviors=(BehaviorName=TryOverwatch65MaybeHunker35, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=65,      Child[1]=TryCower, Param[1]=35)
+Behaviors=(BehaviorName=TryOverwatch80MaybeHunker20, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=80,      Child[1]=TryCower, Param[1]=20)
+Behaviors=(BehaviorName=TryOverwatch90MaybeHunker10, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=90,      Child[1]=TryCower, Param[1]=10)

; +++ Force Overwatch, Turns Attacks <50%cth into Overwatches, used on Sentinels
+Behaviors=(BehaviorName=ForceOverwatch50, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=TryOverwatch)

; +++ Prio: Shoot when Flanking and CTH > 40
+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_ABA, NodeType=Successor, Child[0]=ScoreFlankedEnemy_ABA)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_ABA, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when KillShot and CTH > 40
+Behaviors=(BehaviorName=ShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreKillShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSureShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSureShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSureShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSureShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSureShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSureShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSureShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreSureShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSureShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetIsEnemy, Child[2]=TargetNotBound, Child[3]=TargetNotSacrificeProtected, Child[4]=GenericTargetEvaluations)

; +++ Prio: Shoot an Overwatcher when CTH > 40
+Behaviors=(BehaviorName=ShootWhenOverwatcher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectOverwatchingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateOverwatchingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateOverwatchingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreOverwatchingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreOverwatchingEnemy_ABA, NodeType=Successor, Child[0]=ScoreOverwatchingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreOverwatchingEnemy_ABA, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Overwatch, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)

; +++ Shoot an Suppressor when CTH > 40
+Behaviors=(BehaviorName=ShootWhenSuppressor, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSuppressingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSuppressingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSuppressingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSuppressingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSuppressingEnemy_ABA, NodeType=Successor, Child[0]=ScoreSuppressingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSuppressingEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)

; +++ All Prio shots together
+Behaviors=(BehaviorName=TakePriorityShots, NodeType=Selector, Child[0]=TryStandardShotOnDestructible, Child[1]=ShootWhenFlanking, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSureShot)
+Behaviors=(BehaviorName=ShootPriorityTargets, NodeType=Selector, Child[0]=ShootWhenOverwatcher, Child[1]=ShootWhenSuppressor)

; +++ NotFlanked Versions for Stunlancers
+Behaviors=(BehaviorName=ShootWhenFlanking_NF, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=ShootWhenFlanking)
+Behaviors=(BehaviorName=ShootWhenSureShot_NF, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=ShootWhenSureShot)

; +++ Reacting to suppression
; Am i suppressed?
+Behaviors=(BehaviorName=CheckForSuppressionOnMe, NodeType=Sequence, Child[0]=AffectedByEffect-Suppression, Child[1]=DealWithSuppressionOnMe)
; What are my options? Skill use. Run the Suppression. Hunker Down. Shoot. If all of the previous fail, move by default.
+Behaviors=(BehaviorName=DealWithSuppressionOnMe, NodeType=Selector, Child[0]=UseSkillsWSOM, Child[1]=RunTheSuppression, Child[2]=HunkerDownWSOM, Child[3]=TakeTheShotWSOM, Child[4]=MovementWSOM)
; What skills can i use? Stuff that doesn't use chance to hit. Grenades. Mark Target. Psi. All kinds of stuff. No random roll here, if he has it, he uses it.
+Behaviors=(BehaviorName=UseSkillsWSOM, NodeType=Selector, Child[0]=TryExplosive_JustHitSomething, Child[1]=TryMarkTargetOption_ABA, Child[2]=TryEnergyShieldOnAnyTarget, Child[3]=TryMicroMissiles, Child[4]=TryPsiMindControl, Child[5]=TryDimensionalRift, Child[6]=TryNullLance, Child[7]=TryAcidBlob, Child[8]=TryBlazingPinions, Child[9]=TryTeleportDefensive, Child[10]=TryPsiBomb, Child[11]=TryMindSpinOption, Child[12]=TryPsiReanimation, Child[13]=TryPoisonSpit, Child[14]=TryPoisonSpitSingle, Child[15]=TryGetOverHere)
; Should i run the suppression? Base chance 30 percent. Additional 50% rolls for max health and for 20+ dodge. Running suppression is defensive UNLESS it can lead to a flank.
+Behaviors=(BehaviorName=RunTheSuppression, NodeType=Selector, Child[0]=RunBecauseFullHP, Child[1]=RunBecauseDodge, Child[2]=MovementWSOM30)
+Behaviors=(BehaviorName=RunBecauseFullHP, NodeType=Sequence, Child[0]=HasFullHP, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=RunBecauseDodge, NodeType=Sequence, Child[0]=IsDodgy, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=MovementWSOM, NodeType=Selector, Child[0]=TryMoveIntoFlank, Child[1]=MoveDefensive)
+Behaviors=(BehaviorName=MovementWSOM10, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=10)
+Behaviors=(BehaviorName=MovementWSOM30, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=30)
+Behaviors=(BehaviorName=MovementWSOM50, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=50)
+Behaviors=(BehaviorName=MovementWSOM70, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=70)
+Behaviors=(BehaviorName=MovementWSOM90, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=90)
; Should i Hunker? Base chance 25 percent. TODO: Additional 50% roll for being an easy target. 
+Behaviors=(BehaviorName=HunkerDownWSOM, NodeType=Selector, Child[0]=MaybeHunker25)
; Should i shoot? Base chance 30 percent. Chance for priority shots is higher.
+Behaviors=(BehaviorName=TakeTheShotWSOM, NodeType=Selector, Child[0]=FlankshotWSOM, Child[1]=KillshotWSOM, Child[2]=SureShotWSOM, Child[3]=StandardShotWSOM)
+Behaviors=(BehaviorName=FlankshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=60)
+Behaviors=(BehaviorName=KillshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenKillshot, Param[0]=60)
+Behaviors=(BehaviorName=SureShotWSOM, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=70)
+Behaviors=(BehaviorName=StandardShotWSOM, NodeType=RandFilter, Child[0]=TryShootOrReloadOrOverwatch_ABA, Param[0]=30)

; +++ Reacting to being flanked
; Vanilla AI always moves when being flanked, let's do some sanity checks for that
+Behaviors=(BehaviorName=DoIfFlankedMove_ABA, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedActionSelector_ABA)
; first, determine how dangerous it would be to move
+Behaviors=(BehaviorName=FlankedActionSelector_ABA, NodeType=Selector, Child[0]=ItsSafeToMove, Child[1]=ItsRiskyToMove, Child[2]=ItsSuicideToMove)
+Behaviors=(BehaviorName=ItsSafeToMove, NodeType=Sequence, Child[0]=NoVisibleOverwatchers, Child[1]=NotSuppressed, Child[2]=FlankedAction_Safe)
+Behaviors=(BehaviorName=ItsRiskyToMove, NodeType=Sequence, Child[0]=LessThanTwoVisibleOverwatchers, Child[1]=LessThanTwoVisibleSuppressors, Child[2]=FlankedAction_Risky)
+Behaviors=(BehaviorName=ItsSuicideToMove, NodeType=Sequence, Child[0]=FlankedAction_Suicidal)
; safe ... No Overwatchers, not Suppressed: Try to counterflank, if not possible check if enemy flanked himself already. If so, shoot him. If not, move according to vanilla doctrine.
+Behaviors=(BehaviorName=FlankedAction_Safe, NodeType=Selector, Child[0]=TryToCounterflank, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector)
; risky ... one Overwatcher and/or Suppressor. Movement actions are penalized with a chance to not take them now. If none are taken, unit will continue with its regular AI tree.
+Behaviors=(BehaviorName=FlankedAction_Risky, NodeType=Selector, Child[0]=TryToCounterflank_Risky, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector_Risky)
+Behaviors=(BehaviorName=TryToCounterflank_Risky, NodeType=RandFilter, Child[0]=TryToCounterflank, Param[0]=70)
+Behaviors=(BehaviorName=FlankedMoveSelector_Risky, NodeType=RandFilter, Child[0]=FlankedMoveSelector, Param[0]=40)
; suicidal ... more than one Overwatcher or Suppressor. Movement actions are heavily penalized.
+Behaviors=(BehaviorName=FlankedAction_Suicidal, NodeType=Selector, Child[0]=TryToCounterflank_Suicidal, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector_Suicidal, Child[3]=TryShootOrReload_Suicidal)
+Behaviors=(BehaviorName=TryToCounterflank_Suicidal, NodeType=RandFilter, Child[0]=TryToCounterflank, Param[0]=30)
+Behaviors=(BehaviorName=FlankedMoveSelector_Suicidal, NodeType=RandFilter, Child[0]=FlankedMoveSelector, Param[0]=10)
+Behaviors=(BehaviorName=TryShootOrReload_Suicidal, NodeType=RandFilter, Child[0]=TryShootOrReload, Param[0]=50)
; Try To Counterflank movement: Defensive movement, restricted to tiles that offer a flank shot. 
+Behaviors=(BehaviorName=TryToCounterflank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Defensive, Child[4]=SelectAbility-StandardMove)


; +++ Actions
; ++ Movement
; + StayBack movement profile, for Snipers, Puppeteers and other support units
+Behaviors=(BehaviorName=FindDestinationWithLoS-StayBack, NodeType=Action)
+Behaviors=(BehaviorName=MoveStayBack, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveStayBackUnsafe)
+Behaviors=(BehaviorName=MoveStayBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-StayBack, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMove_StayBack, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=MoveStayBack)
; + Moving into Flanks. Uses the Flanking profile and a hard restriction to tiles that lead to a flank.
+Behaviors=(BehaviorName=TryMoveIntoFlank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Flanking, Child[4]=SelectAbility-StandardMove)

; ++ Ability Use
+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RemoteStart, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FireTazer, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Demolition, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Stealth, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ChainShot, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-HunkerDownNoAnim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-DistressCall, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SmokeRain, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ReinforceABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FrenzyTrigger, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Ragnarok, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM1ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM2ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM3ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM4ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Cleanse, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Muton_PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LightEmUp_ABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Codex_PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Firebreath, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SkirmisherGrapple, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Justice, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvFuseProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-GremlinRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-ReinforceABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-Ragnarok, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LightEmUp_ABA, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-RemoteStart, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-RocketLauncher, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-GremlinRepair, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Stealth, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ReinforceABA, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Cleanse, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-DistressCall, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-HunkerDownNoAnim, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SmokeRain, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FrenzyTrigger, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Ragnarok, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Firebreath, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-TriggerSuperposition, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Codex_PersonalShield, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LightEmUp_ABA, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Muton_WarCry, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Muton_PersonalShield, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FinishHim, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM1ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM2ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM3ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM4ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SkirmisherGrapple, NodeType=Action, param[0]=UseDestination)
+Behaviors=(BehaviorName=SelectAbility-Justice, NodeType=Action)

; ++ Ability targeting, single
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinRepair, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightEmUp_ABA, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Muton_WarCry, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Cleanse, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-FinishHim, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Justice, NodeType=Action)

+Behaviors=(BehaviorName=HasValidTarget-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Cleanse, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-ChainShot, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-LightEmUp_ABA, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-FireTazer, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinRepair, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvFuseProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Demolition, NodeType=Condition)

; ++ Ability targeting, AoE
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RemoteStartProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FirebreathProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BlazingPinionsProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeRainProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeScreenProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-SmokeGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RemoteStartProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-FirebreathProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BlazingPinionsProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SmokeRainProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SmokeScreenProfile, NodeType=Action)

; ++ Generic Target Selectors
+Behaviors=(BehaviorName=SelectTargetForSniperStandardFire, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)
+Behaviors=(BehaviorName=SelectTargetForTazer, NodeType=Sequence, Child[0]=SetTargetStack-FireTazer, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-FireTazer)
+Behaviors=(BehaviorName=SelectTargetForFaceoff, NodeType=Sequence, Child[0]=SetTargetStack-Faceoff, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Faceoff)
+Behaviors=(BehaviorName=SelectTargetForLightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LightningHands)
+Behaviors=(BehaviorName=SelectTargetForAdvFuseProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AdvFuseProtocol, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvFuseProtocol)
+Behaviors=(BehaviorName=SelectTargetForDemolition, NodeType=Sequence, Child[0]=SetTargetStack-Demolition, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Demolition)
+Behaviors=(BehaviorName=SelectTargetForChainShot, NodeType=Sequence, Child[0]=SetTargetStack-ChainShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-ChainShot)
+Behaviors=(BehaviorName=ABA_SelectTargetForMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneMeleeStun, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvDroneMeleeStun)
+Behaviors=(BehaviorName=ABA_SelectTargetForShock, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneShock, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvDroneShock)
+Behaviors=(BehaviorName=SelectJusticeTarget, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Justice)
+Behaviors=(BehaviorName=SelectTargetForFinishHim, NodeType=Sequence, Child[0]=SetTargetStack-FinishHim, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-FinishHim)

; ++ Movement Restrictors

+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-SkirmisherGrapple, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LightEmUp_ABA, NodeType=Action)

+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LightEmUp_ABA, NodeType=Action)

; "Try" nodes, these are the ones that go into Action Selectors
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Sniper, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Sniper, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=TryRemoteStart, NodeType=Sequence, Child[0]=IsAbilityAvailable-RemoteStart, Child[1]=FindPotentialAoETargets-RemoteStartProfile, Child[2]=SelectAoETarget-RemoteStartProfile, Child[3]=SelectAbility-RemoteStart)
+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectTargetForLightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=TryFaceoff, NodeType=Sequence, Child[0]=IsAbilityAvailable-Faceoff, Child[1]=MoreThanTwoEnemiesVisible, Child[2]=SelectTargetForFaceoff, Child[3]=SelectAbility-Faceoff)
+Behaviors=(BehaviorName=TryTazer, NodeType=Sequence, Child[0]=IsAbilityAvailable-FireTazer, Child[1]=SelectTargetForTazer, Child[2]=SelectAbility-FireTazer)
+Behaviors=(BehaviorName=TryAidProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AidProtocol, Child[1]=SelectTargetForAidProtocol, Child[2]=SelectAbility-AidProtocol)
+Behaviors=(BehaviorName=TryGremlinHeal, NodeType=Sequence, Child[0]=IsAbilityReady-GremlinHeal, Child[1]=SelectTargetForGremlinHeal, Child[2]=SelectAbility-GremlinHeal)
+Behaviors=(BehaviorName=TryStealth, NodeType=Sequence, Child[0]=IsAbilityAvailable-Stealth, Child[1]=SelectAbility-Stealth)
+Behaviors=(BehaviorName=TryAdvFuseProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AdvFuseProtocol, Child[1]=SelectTargetForAdvFuseProtocol, Child[2]=SelectAbility-AdvFuseProtocol)
+Behaviors=(BehaviorName=TryGremlinRepair, NodeType=Sequence, Child[0]=IsAbilityReady-GremlinRepair, Child[1]=SelectTargetForGremlinRepair, Child[2]=SelectAbility-GremlinRepair)
+Behaviors=(BehaviorName=TrySmokeGrenade, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-SmokeGrenadeProfile, Child[2]=SelectAoETarget-SmokeGrenadeProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryDistress, NodeType=Sequence, Child[0]=IsAbilityAvailable-DistressCall, Child[1]=SelectAbility-DistressCall)
+Behaviors=(BehaviorName=TryMarkTargetOption_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=ShootWhenSureShot, Child[2]=TryMarkTargetOption)
+Behaviors=(BehaviorName=TrySmokeScreen, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-SmokeScreenProfile, Child[2]=SelectAoETarget-SmokeScreenProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TrySmoke, NodeType=Sequence, Child[0]=IsAbilityAvailable-SmokeRain, Child[1]=FindPotentialAoETargets-SmokeRainProfile, Child[2]=SelectAoETarget-SmokeRainProfile, Child[3]=SelectAbility-SmokeRain)
+Behaviors=(BehaviorName=TryFrenzyTrigger, NodeType=Sequence, Child[0]=IsAbilityAvailable-FrenzyTrigger, Child[1]=SelectAbility-FrenzyTrigger)
+Behaviors=(BehaviorName=TryBlazingPinions_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=FindPotentialAoETargets-BlazingPinionsProfile_aggro, Child[2]=SelectAoETarget-BlazingPinionsProfile_aggro, Child[3]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=TryFirebreath, NodeType=Sequence, Child[0]=IsAbilityAvailable-Firebreath, Child[1]=FindPotentialAoETargets-FirebreathProfile, Child[2]=SelectAoETarget-FirebreathProfile, Child[3]=SelectAbility-Firebreath)
+Behaviors=(BehaviorName=TryPersonalShield_Codex, NodeType=Sequence, Child[0]=IsAbilityAvailable-Codex_PersonalShield, Child[1]=SelectAbility-Codex_PersonalShield)
+Behaviors=(BehaviorName=TryWarCryOnMultipleTargets_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_WarCry, Child[1]=NotWarCried, Child[2]=HasMultipleWarCryTargets_ABA, Child[3]=SelectAbility-Muton_WarCry)
+Behaviors=(BehaviorName=TryWarCryOnFewTargets_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_WarCry, Child[1]=NotWarCried, Child[2]=HasFewWarCryTargets_ABA, Child[3]=SelectAbility-Muton_WarCry)
+Behaviors=(BehaviorName=TryPersonalShield_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_PersonalShield, Child[1]=SelectAbility-Muton_PersonalShield)
+Behaviors=(BehaviorName=TryCleanse, NodeType=Selector, Child[0]=TryCleanseMindControl, Child[1]=TryCleansePanicked, Child[2]=TryCleanseDisoriented) 
+Behaviors=(BehaviorName=TryFinishHim, NodeType=Sequence, Child[0]=IsAbilityAvailable-FinishHim, Child[1]=SelectTargetForFinishHim, Child[2]=SelectAbility-FinishHim)
+Behaviors=(BehaviorName=TryJustice, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectJusticeTarget, Child[2]=SelectAbility-Justice)

; Two versions of extended TryShootOrReloadOrOverwatch: "ABA" has the priority shots. "Adv" has those and also the extra check for Hunker on Disorient
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=OverwatchOverride, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSuppressor, Child[4]=ShootWhenOverwatcher, Child[5]=ShootWhenSureShot, Child[6]=ConsiderTakingOverwatch, Child[7]=ShootIfAvailable, Child[8]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Adv, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=TryShootOrReloadOrOverwatch_ABA)

; These merge Rockets, launched Grenades and thrown grenades together into handy "TryExplosive" behaviors
+Behaviors=(BehaviorName=TryExplosive_prio, NodeType=Selector, Child[0]=TryRocketLauncher_prio, Child[1]=TryGrenadeLauncher_prio, Child[2]=TryGrenade) 
+Behaviors=(BehaviorName=TryExplosive_norm, NodeType=Selector, Child[0]=TryRocketLauncher_norm, Child[1]=TryGrenadeLauncher_norm, Child[2]=TryGrenade) 
+Behaviors=(BehaviorName=TryExplosive_aggro, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_Aggressive) 
+Behaviors=(BehaviorName=TryExplosive_JustHitSomething, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_JustHitSomething) 

; Other ability helpers, anything that's off the Standard

; + Basic Sniper fire
+Behaviors=(BehaviorName=ShootIfAvailable_Sniper, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperStandardFire, Child[2]=SelectAbility-SniperStandardFire)
; + Aid Protocol
+Behaviors=(BehaviorName=SelectTargetForAidProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AidProtocol, Child[1]=SelectTargetForAid, Child[2]=HasValidTarget-AidProtocol)
+Behaviors=(BehaviorName=SelectTargetForAid, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForAid, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForAid, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForAid)
+Behaviors=(BehaviorName=EvaluateForAid, NodeType=Sequence, Child[0]=ScoreByHP)
; + Heal Protocol
+Behaviors=(BehaviorName=SelectTargetForGremlinHeal, NodeType=Sequence, Child[0]=SetTargetStack-GremlinHeal, Child[1]=SelectTargetForHeal, Child[2]=HasValidTarget-GremlinHeal)
+Behaviors=(BehaviorName=SelectTargetForHeal, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForHeal, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForHeal, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForHeal)
+Behaviors=(BehaviorName=EvaluateForHeal, NodeType=Sequence, Child[0]=ScoreByHP)
; + Repair Protocol
+Behaviors=(BehaviorName=SelectTargetForGremlinRepair, NodeType=Sequence, Child[0]=SetTargetStack-GremlinRepair, Child[1]=SelectTargetForRepair, Child[2]=HasValidTarget-GremlinRepair)
+Behaviors=(BehaviorName=SelectTargetForRepair, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForRepair, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForRepair, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForRepair)
+Behaviors=(BehaviorName=EvaluateForRepair, NodeType=Sequence, Child[0]=ScoreByHP)


; +++ Grenades and other Explosives
; ++ Throw single target grenade when only bad shots (<50%) available
+Behaviors=(BehaviorName=TryGrenadeSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-GrenadeSingleProfile, Child[2]=SelectAoETarget-GrenadeSingleProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenadeSingleOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-GrenadeSingleProfile, Child[3]=SelectAoETarget-GrenadeSingleProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenade_Aggressive, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingleOnBadShot)
+Behaviors=(BehaviorName=TryGrenade_JustHitSomething, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingle)
; ++ Rocket Launcher
+Behaviors=(BehaviorName=TryRocketLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_prio, Child[2]=SelectAoETarget-RocketLauncherProfile_prio, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_norm, Child[2]=SelectAoETarget-RocketLauncherProfile_norm, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_aggro, Child[2]=SelectAoETarget-RocketLauncherProfile_aggro, Child[3]=SelectAbility-RocketLauncher)
; ++ Grenade Launcher
+Behaviors=(BehaviorName=TryGrenadeLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_prio, Child[2]=SelectAoETarget-GrenadeLauncherProfile_prio, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_norm, Child[2]=SelectAoETarget-GrenadeLauncherProfile_norm, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, Child[2]=SelectAoETarget-GrenadeLauncherProfile_aggro, Child[3]=SelectAbility-LaunchGrenade)

; +++ TryCallReinforcements behaviour 
; --- by Rayman!, from his "ADVENT Officer - Call Reinforcements" mod
+Behaviors=(BehaviorName=TryCallReinforcementsABA, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-ReinforceABA, \\
	Child[1]=MultipleEnemiesVisible, \\
	Child[2]=Reinforce_HasNoAllies, \\
	Child[3]=SelectAbility-ReinforceABA)
+Behaviors=(BehaviorName=Reinforce_HasNoAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="<", Param[2]=1)

; +++ Demolition
; Demo is used when a unit is in cover and difficult to hit (chance <50), but not completely impossible to hit. Max Hitchance needs between the two thresholds. If it is, the unit with best hitchance is chosen (usually, uses generic eval).
+Behaviors=(BehaviorName=TryDemolition, NodeType=Sequence, Child[0]=IsAbilityAvailable-Demolition, Child[1]=AllHitChancesBelowDemoThreshold, Child[2]=AllHitChancesOverDemoThreshold, Child[3]=SelectTargetForDemolition, Child[4]=SelectAbility-Demolition)
+Behaviors=(BehaviorName=AllHitChancesOverDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="10")
+Behaviors=(BehaviorName=AllHitChancesBelowDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")

; +++ ChainShot
; Has a minimum hitchance because of the aim penalty.
+Behaviors=(BehaviorName=TryChainShot_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChainShot, Child[1]=AllHitChancesOverChainShotThreshold, Child[2]=SelectTargetForChainShot, Child[3]=SelectAbility-ChainShot)
+Behaviors=(BehaviorName=AllHitChancesOverChainShotThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="40")

; +++ Aggressive Move, restricted to Flanking
+Behaviors=(BehaviorName=MoveAggressiveFlankUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAggressiveFlank, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveAggressiveFlankUnsafe)

; +++ Alien Hunker, includes compatibility with the mod "Everyone Gets Hunker Down" by Advent Avenger
+Behaviors=(BehaviorName=DoCowerNoAnim, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDownNoAnim, Child[1]=SelectAbility-HunkerDownNoAnim)
+Behaviors=(BehaviorName=TryCower, NodeType=Selector, Child[0]=DoCower, Child[1]=DoCowerNoAnim)

; +++ Using Hunker Down ("CheckForHunker" is the one for the AI trees)
; Random actions
+Behaviors=(BehaviorName=MaybeHunker10, NodeType=RandFilter, Child[0]=TryCower, Param[0]=10)
+Behaviors=(BehaviorName=MaybeHunker25, NodeType=RandFilter, Child[0]=TryCower, Param[0]=25)
+Behaviors=(BehaviorName=MaybeHunker50, NodeType=RandFilter, Child[0]=TryCower, Param[0]=50)
+Behaviors=(BehaviorName=MaybeHunker75, NodeType=RandFilter, Child[0]=TryCower, Param[0]=75)
+Behaviors=(BehaviorName=MaybeHunker90, NodeType=RandFilter, Child[0]=TryCower, Param[0]=90)
; No Hunkering when VIP or Evac is in sight. No Hunkering when it's the last enemy on the board.
+Behaviors=(BehaviorName=CheckForHunker, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=NotNearEvacOrVIP, Child[2]=ConsiderHunker)
+Behaviors=(BehaviorName=NoVIPVisible, NodeType=Inverter, Child[0]=VIPVisible)
+Behaviors=(BehaviorName=NoEvacVisible, NodeType=Inverter, Child[0]=EvacWithinVisRange)
+Behaviors=(BehaviorName=NotNearEvacOrVIP, NodeType=Sequence, Child[0]=NoVIPVisible, Child[1]=NoEvacVisible)
; All conditions together, to be linked into "CheckForHunker". 
+Behaviors=(BehaviorName=ConsiderHunker, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=HunkerWhenWounded)
; Hunker chance if disoriented. Default 75 percent
+Behaviors=(BehaviorName=HunkerWhenDisoriented, NodeType=Sequence, Child[0]=AffectedByEffect-Disoriented, Child[1]=MaybeHunker75)
; Hunker chance when wounded.
+Behaviors=(BehaviorName=HunkerWhenWounded, NodeType=Selector, Child[0]=HunkerWhenBloodied, Child[1]=HunkerWhenLowHP)
+Behaviors=(BehaviorName=HunkerWhenBloodied, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=NotLowHP, Child[2]=MaybeHunker25)
+Behaviors=(BehaviorName=HunkerWhenLowHP, NodeType=Sequence, Child[0]=HasLowHP, Child[1]=MaybeHunker50)

; +++ Using Suppression
; Countersuppress when enemy suppressors or overwatchers are around 
+Behaviors=(BehaviorName=CounterSuppress, NodeType=Selector, Child[0]=SuppressSuppressors, Child[1]=SuppressOverwatchers)
+Behaviors=(BehaviorName=SuppressSuppressors, NodeType=Sequence, Child[0]=HasVisibleSuppressors, Child[1]=FindSuppressionTarget)
+Behaviors=(BehaviorName=SuppressOverwatchers, NodeType=Sequence, Child[0]=HasVisibleOverwatchers, Child[1]=FindSuppressionTarget)
+Behaviors=(BehaviorName=HasVisibleSuppressors, NodeType=Inverter, Child[0]=NoVisibleSuppressors)
+Behaviors=(BehaviorName=HasVisibleOverwatchers, NodeType=Inverter, Child[0]=NoVisibleOverwatchers)
; Suppress closest when only bad shots
+Behaviors=(BehaviorName=MaybeSuppressClosestOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=RollForSuppress)
+Behaviors=(BehaviorName=RollForSuppress, NodeType=RandFilter, Child[0]=TrySuppressClosest, Param[0]=50)
; This one is for Captains and Mutons. Those initiate Suppression if they have enough allies on the field to profit from the cover fire. 
+Behaviors=(BehaviorName=CheckForInitiateSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=SuppressWhenManyAllies, Child[2]=SuppressWhenTwoAllies, Child[3]=SuppressWhenOneAlly, Child[4]=CheckForJoiningSuppression)
+Behaviors=(BehaviorName=SuppressWhenManyAllies, NodeType=Sequence, Child[0]=ManyAlliesVisible, Child[1]=MaybeSuppress90)
+Behaviors=(BehaviorName=SuppressWhenTwoAllies, NodeType=Sequence, Child[0]=TwoAlliesVisible, Child[1]=MaybeSuppress50)
+Behaviors=(BehaviorName=SuppressWhenOneAlly, NodeType=Sequence, Child[0]=OneAllyVisible, Child[1]=MaybeSuppress10)
+Behaviors=(BehaviorName=OneAllyVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="=", Param[2]=1)
+Behaviors=(BehaviorName=TwoAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="=", Param[2]=2)
+Behaviors=(BehaviorName=ManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=MaybeSuppress10, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=10)
+Behaviors=(BehaviorName=MaybeSuppress50, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=50)
+Behaviors=(BehaviorName=MaybeSuppress90, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=90)
; This one is for everyone and is worked into the ShootOrReloadOrOverwatch thingy. Enemies only suppress when they have only bad shots, but will likely fall in when any suppression is already happening. Of course, they also use countersuppression.
;+Behaviors=(BehaviorName=CheckForJoiningSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=FindAnyFriendlySuppressors, Child[2]=MaybeSuppressClosestOnBadShot)
; Disabled the Joining Routine for now, it seems to make problems. Stripped this Suppression behavior down to CounterSuppression and BadShot
+Behaviors=(BehaviorName=CheckForJoiningSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=MaybeSuppressClosestOnBadShot)

+Behaviors=(BehaviorName=FindAnyFriendlySuppressors, NodeType=RepeatUntilFail, Child[0]=CheckForFriendlySuppressor)
+Behaviors=(BehaviorName=CheckForFriendlySuppressor, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsAlly, Child[2]=TargetIsApplyingEffect-Suppression, Child[3]=MaybeSuppress50)
; Find suppression target
+Behaviors=(BehaviorName=FindSuppressionTarget, NodeType=Selector, Child[0]=CounterSuppressOverwatcher, Child[1]=CounterSuppressSuppressor, Child[2]=TrySuppressClosest)
+Behaviors=(BehaviorName=CounterSuppressOverwatcher, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectOverwatchingEnemyTarget_Supp, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_Supp, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=EvaluateOverwatchingEnemyTargets_Supp, Child[2]=HasValidTarget-Suppression)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemyTargets_Supp, NodeType=RepeatUntilFail, Child[0]=EvaluateOverwatchingEnemies_Supp)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemies_Supp, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreOverwatchingEnemy_Supp, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreOverwatchingEnemy_Supp, NodeType=Successor, Child[0]=ScoreOverwatchingEnemy_Supp)
+Behaviors=(BehaviorName=ScoreOverwatchingEnemy_Supp, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Overwatch, Child[1]=TargetIsEnemy, Child[2]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=CounterSuppressSuppressor, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectSuppressingEnemyTarget_Supp, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_Supp, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=EvaluateSuppressingEnemyTargets_Supp, Child[2]=HasValidTarget-Suppression)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemyTargets_Supp, NodeType=RepeatUntilFail, Child[0]=EvaluateSuppressingEnemies_Supp)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemies_Supp, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSuppressingEnemy_Supp, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSuppressingEnemy_Supp, NodeType=Successor, Child[0]=ScoreSuppressingEnemy_Supp)
+Behaviors=(BehaviorName=ScoreSuppressingEnemy_Supp, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=TargetIsEnemy, Child[2]=GenericTargetEvaluations)

; --- Target Evaluations for Psi Powers
-Behaviors=(BehaviorName=EvaluateForStasis, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=EvaluateForStasis, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=TargetIsNotCivilian, Child[2]=TargetNotTeamResistance, Child[3]=TargetIsEnemy, Child[4]=TargetIsNotEnemyVIP, Child[5]=TargetNotBoundOrPanicked, Child[6]=TargetIsAttackable, Child[7]=TargetScoreByScaledDistance-1, Child[8]=AddToTargetScore_100, Child[9]=AddSmallRandomTargetScore)

; --- Chosen Generic Action
-Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector,      Child[0]=GenericAbilityRoot,      Child[1]=DoIfFlankedMove,      Child[2]=TryMoveThenGrenade,      Child[3]=TryShootOrReloadOrOverwatch,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector,      Child[0]=GenericAbilityRoot,      Child[1]=DoIfFlankedMove,      Child[2]=TakePriorityShots,      Child[3]=TryMoveThenGrenade,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=HuntEnemyWithCover)


; +++ ENEMIES, BEHAVIOR TREES +++

; --- Advent Trooper, Better AI
+Behaviors=(BehaviorName="AdventTrooper_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=Advent_ABA_RedFirstAction, Child[3]=Advent_ABA_RedLastAction)
+Behaviors=(BehaviorName=Advent_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Advent_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Advent_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryMoveThenGrenade,      Child[2]=MoveAdvanceToCover,       Child[3]=TryShootOrReloadOrOverwatch_Adv,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Advent_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Advent_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Advent_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryGrenade,      Child[1]=TryShootOrReloadOrOverwatch_Adv,      Child[2]=HuntEnemyWithCover,      Child[3]=MoveDefensive)

; Demolitionist
+Behaviors=(BehaviorName="AdventTrooper_Grenade::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_Grenade_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_Grenade_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_Grenade_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_Grenade_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=Advent_Grenade_RedFirstAction, Child[3]=Advent_Grenade_RedLastAction)
+Behaviors=(BehaviorName=Advent_Grenade_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Advent_Grenade_RedFirstActionSelector)
+Behaviors=(BehaviorName=Advent_Grenade_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryExplosive_prio,      Child[2]=TryMoveThenGrenade,      Child[3]=TryExplosive_aggro,      Child[4]=TryShootOrReloadOrOverwatch_Adv,      Child[5]=MoveAggressive,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Advent_Grenade_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Advent_Grenade_RedLastActionSelector)
+Behaviors=(BehaviorName=Advent_Grenade_RedLastActionSelector, NodeType=Selector,      Child[0]=TryExplosive_prio,     Child[1]=TakePriorityShots,           Child[2]=TryExplosive_norm,         Child[3]=ShootPriorityTargets,       Child[4]=TryExplosive_aggro,      Child[5]=TryShootOrReloadOrOverwatch_Adv,      Child[6]=HuntEnemyWithCover,      Child[7]=MoveAggressive)

; Gunslinger
+Behaviors=(BehaviorName="AdventTrooper_Pistol::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_Pistol_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_Pistol_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_Pistol_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_Pistol_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=Advent_Pistol_RedFirstAction, Child[3]=Advent_Pistol_RedLastAction)
+Behaviors=(BehaviorName=Advent_Pistol_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Advent_Pistol_RedFirstActionSelector)
+Behaviors=(BehaviorName=Advent_Pistol_RedFirstActionSelector, NodeType=Selector,      Child[0]=TryLightningHands,       Child[1]=DoIfFlankedMove,     Child[2]=TryMoveThenGrenade,      Child[3]=TryFaceoff,       Child[4]=MoveAdvanceToCover,       Child[5]=TryShootOrReloadOrOverwatch_Adv,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Advent_Pistol_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Advent_Pistol_RedLastActionSelector)
+Behaviors=(BehaviorName=Advent_Pistol_RedLastActionSelector, NodeType=Selector,      Child[0]=TryGrenade,     Child[1]=TryLightningHands,       Child[2]=TryFaceoff,    Child[3]=TryShootOrReloadOrOverwatch_Adv,      Child[4]=HuntEnemyWithCover,      Child[5]=MoveAggressive)

; Sentinel
+Behaviors=(BehaviorName="AdventTrooper_Sentinel::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_Sent_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_Sent_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_Sent_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_Sent_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=Advent_Sent_RedFirstAction, Child[3]=Advent_Sent_RedLastAction)
+Behaviors=(BehaviorName=Advent_Sent_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Advent_Sent_RedFirstActionSelector)
+Behaviors=(BehaviorName=Advent_Sent_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryMoveThenGrenade,      Child[2]=TryShootOrReloadOrOverwatch_Adv,      Child[3]=Fallback)
+Behaviors=(BehaviorName=Advent_Sent_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Advent_Sent_RedLastActionSelector)
+Behaviors=(BehaviorName=Advent_Sent_RedLastActionSelector, NodeType=Selector,      Child[0]=TryGrenade,      Child[1]=ForceOverwatch50,    Child[2]=TryShootOrReloadOrOverwatch_Adv,      Child[3]=MoveDefensive)

; Cannon
+Behaviors=(BehaviorName="AdventTrooper_Cannon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_Cannon_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_Cannon_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_Cannon_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_Cannon_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=Advent_Cannon_RedFirstAction, Child[3]=Advent_Cannon_RedLastAction)
+Behaviors=(BehaviorName=Advent_Cannon_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Advent_Cannon_RedFirstActionSelector)
+Behaviors=(BehaviorName=Advent_Cannon_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TakePriorityShots,      Child[2]=TryMoveThenGrenade,      Child[3]=TakePriorityShots,      Child[4]=TryDemolition,        Child[5]=TryShootOrReloadOrOverwatch_Adv,      Child[6]=Fallback)
+Behaviors=(BehaviorName=Advent_Cannon_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Advent_Cannon_RedLastActionSelector)
+Behaviors=(BehaviorName=Advent_Cannon_RedLastActionSelector, NodeType=Selector,      Child[0]=TryGrenade,      Child[1]=TakePriorityShots,      Child[2]=TryDemolition,       Child[3]=TryChainShot_ABA,    Child[4]=TryShootOrReloadOrOverwatch_Adv,      Child[5]=MoveDefensive)

; --- Advent Captain, Better AI
+Behaviors=(BehaviorName="AdventCaptain_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvCaptain_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvCaptain_ABA_RedFirstAction, Child[2]=AdvCaptain_ABA_RedLastAction)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvCaptain_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=AdvCaptainTryMoveThenGrenade,       Child[2]=TryCallReinforcementsABA,     Child[3]=TryMarkTargetOption_ABA,       Child[4]=MoveAdvanceToCover,     Child[5]=TryShootOrReloadOrOverwatch_Adv,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvCaptain_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=AdvCaptainTryGrenade,      Child[1]=TryCallReinforcementsABA,      Child[2]=TryMarkTargetOption_ABA,      Child[3]=TryShootOrReloadOrOverwatch_Adv,      Child[4]=HuntEnemyWithCover,      Child[5]=MoveDefensive)

; Sniper
+Behaviors=(BehaviorName="AdventCaptain_Sniper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_Sniper_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvCaptain_Sniper_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvCaptain_Sniper_RedFirstAction, Child[2]=AdvCaptain_Sniper_RedLastAction)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvCaptain_Sniper_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedFirstActionSelector, NodeType=Selector,      Child[0]=TryLightningHands,      Child[1]=DoIfFlankedMove,      Child[2]=TryCallReinforcementsABA,      Child[3]=TryShootOrReloadOrOverwatch_Sniper,      Child[4]=MoveStayBack)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvCaptain_Sniper_RedLastActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_Sniper_RedLastActionSelector, NodeType=Selector,      Child[0]=TryFaceoff,       Child[1]=TrySmokeScreen,    Child[2]=TryCallReinforcementsABA ,   Child[3]=TryMarkTargetOption,    Child[4]=TryShootOrReloadOrOverwatch_Sniper,      Child[5]=MoveStayBack)

; --- StunLancer, Better AI
+Behaviors=(BehaviorName="AdventStunLancer_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvStunLancer_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvStunLancer_ABA_RedAbilitySwitch)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_RedAbilitySwitch, NodeType=Selector, Child[0]=VanillaTreeForM1Lancers, Child[1]=AdvStunLancer_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=VanillaTreeForM1Lancers, NodeType=Sequence,Child[0]=TargetTemplateNameIs-AdvStunLancerM1, Child[1]=AdventSL_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvStunLancer_ABA_FirstAction, Child[2]=AdvStunLancer_ABA_LastAction)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvStunLancer_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_FirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMoveStunlancer,      Child[1]=ShootWhenFlanking_NF,      Child[2]=ShootWhenSureShot_NF,    Child[3]=MoveStunlancer,      Child[4]=AdvStunLancer_ABA_RandActionSelector,      Child[5]=TryBendingReedPostStunLance)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvStunLancer_ABA_LastActionSelector)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_LastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking_NF,      Child[1]=ShootWhenSureShot_NF,     Child[2]=AdvStunLancer_ABA_RandActionSelector,      Child[3]=TryBendingReedPostStunLance)

+Behaviors=(BehaviorName=FindDestinationWithLoS-Stunlancer, NodeType=Action)
+Behaviors=(BehaviorName=MoveStunlancer, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveStunlancerUnsafe)
+Behaviors=(BehaviorName=MoveStunlancerUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-Stunlancer, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMoveStunlancer, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=MoveStunlancerUnsafe)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_RandActionSelector, NodeType = RandSelector, Child[0]=AdvStunLancer_ABA_ActionSelector_Melee, Param[0]=80, Child[1]=AdvStunLancer_ABA_ActionSelector_Range, Param[1]=20)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_ActionSelector_Melee, NodeType=Selector,      Child[0]=TryStunLance,      Child[1]=TryShootOrReloadOrOverwatch_Adv,      Child[2]=MoveStunlancer)
+Behaviors=(BehaviorName=AdvStunLancer_ABA_ActionSelector_Range, NodeType=Selector,      Child[0]=TryShootOrReloadOrOverwatch_Adv,      Child[1]=TryStunlance,      Child[2]=MoveStunlancer)

; Trauma Lancer
+Behaviors=(BehaviorName="AdventStunLancer_Tazer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvStunLancer_Tazer_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvStunLancer_Tazer_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvStunLancer_Tazer_RedFirstAction, Child[2]=AdvStunLancer_Tazer_RedLastAction)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvStunLancer_Tazer_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=MoveDefensive,      Child[2]=TryTazer,        Child[3]=TryShootOrReloadOrOverwatch_Adv,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvStunLancer_Tazer_RedLastActionSelector)
+Behaviors=(BehaviorName=AdvStunLancer_Tazer_RedLastActionSelector, NodeType=Selector,      Child[0]=TryTazer,      Child[1]=TryShootOrReloadOrOverwatch_Adv,      Child[2]=HuntEnemyWithCover,      Child[3]=MoveDefensive)

; --- Shieldbearer, Better AI
+Behaviors=(BehaviorName="AdventShieldBearer_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvShieldBearer_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvShieldBearer_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvShieldBearer_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvShieldBearer_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ShieldBearer_ABA_FirstAction, Child[2]=ShieldBearer_ABA_LastAction)
+Behaviors=(BehaviorName=ShieldBearer_ABA_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ShieldBearer_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=ShieldBearer_ABA_FirstActionSelector, NodeType=Selector,      Child[0]=TryMoveForEnergyShield,      Child[1]=TryEnergyShieldOnMultipleTargets,      Child[2]=DoIfFlankedMove,      Child[3]=MoveAdvanceToCover,      Child[4]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=ShieldBearer_ABA_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ShieldBearer_ABA_LastActionSelector)
+Behaviors=(BehaviorName=ShieldBearer_ABA_LastActionSelector, NodeType=Selector,      Child[0]=TryEnergyShieldOnAnyTarget,      Child[1]=TryShootOrReloadOrOverwatch_ABA,       Child[2]=HuntEnemyWithCover,      Child[3]=MoveDefensive)

; Don't use ES when already shielded. If ES would only affect 1 or 2 guys, make a random roll if ES should actually be used.
-Behaviors=(BehaviorName=TryEnergyShieldOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=HasMultipleEnergyShieldTargets, Child[2]=SelectAbility-EnergyShield)
-Behaviors=(BehaviorName=TryEnergyShieldOnAnyTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=HasAnyEnergyShieldTargets, Child[2]=SelectAbility-EnergyShield)
+Behaviors=(BehaviorName=TryEnergyShieldOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=NotShielded, Child[2]=HasMultipleEnergyShieldTargets, Child[3]=UseES_Selector)
+Behaviors=(BehaviorName=TryEnergyShieldOnAnyTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=NotShielded, Child[2]=HasAnyEnergyShieldTargets, Child[3]=UseES_Selector)
+Behaviors=(BehaviorName=NotShielded, NodeType=Inverter, Child[0]=AffectedByEffect-EnergyShieldEffect)
+Behaviors=(BehaviorName=UseES_Selector, NodeType=Selector,      Child[0]=UseES_One,      Child[1]=UseES_Two,      Child[2]=UseES_ThreePlus)
+Behaviors=(BehaviorName=UseES_One, NodeType=Sequence,      Child[0]=HasOneESTargets,      Child[1]=RollforES_One)
+Behaviors=(BehaviorName=RollForES_One, NodeType=RandFilter, Child[0]=SelectAbility-EnergyShield, Param[0]=30)
+Behaviors=(BehaviorName=UseES_Two, NodeType=Sequence,      Child[0]=HasTwoESTargets,      Child[1]=RollforES_Two)
+Behaviors=(BehaviorName=RollForES_Two, NodeType=RandFilter, Child[0]=SelectAbility-EnergyShield, Param[0]=50)
+Behaviors=(BehaviorName=UseES_ThreePlus, NodeType=Sequence,      Child[0]=HasThreeOrMoreESTargets,      Child[1]=SelectAbility-EnergyShield)
+Behaviors=(BehaviorName=HasOneESTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-EnergyShield, Param[1]="<", Param[2]=2)
+Behaviors=(BehaviorName=HasTwoESTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-EnergyShield, Param[1]="=", Param[2]=2)
+Behaviors=(BehaviorName=HasThreeOrMoreESTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-EnergyShield, Param[1]=">", Param[2]=2)

; Guardian
+Behaviors=(BehaviorName="AdventShieldBearer_Sniper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvShieldBearer_Sniper_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvShieldBearer_Sniper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvShieldBearer_Sniper_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvShieldBearer_Sniper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ShieldBearer_Sniper_FirstAction, Child[2]=ShieldBearer_Sniper_LastAction)
+Behaviors=(BehaviorName=ShieldBearer_Sniper_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ShieldBearer_Sniper_FirstActionSelector)
+Behaviors=(BehaviorName=ShieldBearer_Sniper_FirstActionSelector, NodeType=Selector,      Child[0]=TryMoveForEnergyShield,      Child[1]=TryEnergyShieldOnMultipleTargets,      Child[2]=DoIfFlankedMove,      Child[3]=TryShootOrReloadOrOverwatch_Sniper,      Child[4]=Fallback)
+Behaviors=(BehaviorName=ShieldBearer_Sniper_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ShieldBearer_Sniper_LastActionSelector)
+Behaviors=(BehaviorName=ShieldBearer_Sniper_LastActionSelector, NodeType=Selector,      Child[0]=TryEnergyShieldOnAnyTarget,      Child[1]=TryShootOrReloadOrOverwatch_Sniper,       Child[2]=MoveStayBack)

; --- MEC, Better AI
+Behaviors=(BehaviorName="AdventMEC_ABA::CharacterRoot", NodeType=Selector, Child[0]=MecMk1Branch_ABA, Child[1]=AdvMECMk2_ABA_Root)
+Behaviors=(BehaviorName=MecMk1Branch_ABA, NodeType=Sequence, Child[0]=TemplateNameIs-AdvMEC_M1, Child[1]=AdvMEC_ABA_Root)
+Behaviors=(BehaviorName=AdvMEC_ABA_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MEC_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=MEC_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MEC_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=MEC_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MEC_ABA_RedFirstAction, Child[2]=MEC_ABA_RedLastAction)
+Behaviors=(BehaviorName=MEC_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MEC_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=MEC_ABA_FirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenMicroMissiles,      Child[1]=MoveNoCover,      Child[2]=HuntEnemy,      Child[3]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=MEC_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MEC_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=MEC_ABA_RedLastActionSelector, NodeType=Selector,     Child[0]=TryMicroMissiles,      Child[1]=ShootOrSuppressIfNoGoodShot,      Child[2]=TryShootOrReloadOrOverwatch_ABA,           Child[3]=HuntEnemy,      Child[4]=MoveNoCover)
+Behaviors=(BehaviorName=AdvMECMk2_ABA_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=MECMk2_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MECMk2_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=MECMk2_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MECMk2_ABA_RedFirstAction, Child[2]=MECMk2_ABA_RedLastAction)
+Behaviors=(BehaviorName=MECMk2_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECMk2_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=MECMk2_ABA_FirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenMicroMissiles,      Child[1]=MoveNoCover,      Child[2]=HuntEnemy,      Child[3]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=MECMk2_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MECMk2_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=MECMk2_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryMicroMissiles,      Child[1]=ShootOrSuppressIfNoGoodShot,      Child[2]=TryMicroMissilesMk2,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=HuntEnemy,      Child[5]=MoveNoCover)


; Support MEC
+Behaviors=(BehaviorName="SupportMEC::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SupportMEC_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=SupportMEC_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SupportMEC_RedAbilitySelector)
+Behaviors=(BehaviorName=SupportMEC_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SupportMEC_RedFirstAction, Child[2]=SupportMEC_RedLastAction)
+Behaviors=(BehaviorName=SupportMEC_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SupportMEC_FirstActionSelector)
+Behaviors=(BehaviorName=SupportMEC_FirstActionSelector, NodeType=Selector,      Child[0]=TrySmoke,     Child[1]=TryMoveThenMicroMissiles,      Child[2]=MoveNoCover,      Child[3]=HuntEnemy,      Child[4]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=SupportMEC_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SupportMEC_RedLastActionSelector)
+Behaviors=(BehaviorName=SupportMEC_RedLastActionSelector, NodeType=Selector,     Child[0]=TrySmoke,    Child[1]=TryMicroMissiles,      Child[2]=ShootOrSuppressIfNoGoodShot,      Child[3]=TryShootOrReloadOrOverwatch_ABA,           Child[4]=HuntEnemy,      Child[5]=MoveNoCover)

; AutoDoc
+Behaviors=(BehaviorName="AutoDoc::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AutoDoc_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AutoDoc_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AutoDoc_RedAbilitySelector)
+Behaviors=(BehaviorName=AutoDoc_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AutoDoc_RedFirstAction, Child[2]=AutoDoc_RedLastAction)
+Behaviors=(BehaviorName=AutoDoc_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AutoDoc_FirstActionSelector)
+Behaviors=(BehaviorName=AutoDoc_FirstActionSelector, NodeType=Selector,      Child[0]=TryGremlinHeal,      Child[1]=NCMoveFlanking,      Child[2]=HuntEnemy,      Child[3]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=AutoDoc_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AutoDoc_RedLastActionSelector)
+Behaviors=(BehaviorName=AutoDoc_RedLastActionSelector, NodeType=Selector,     Child[0]=ShootWhenFlanking,      Child[1]=ShootOrSuppressIfNoGoodShot,      Child[2]=TryShootOrReloadOrOverwatch_ABA,           Child[3]=HuntEnemy,      Child[4]=NCMoveFlanking)

; --- Avatar, Better AI
+Behaviors=(BehaviorName="AdventPsiWitch_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PsiWitch_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PsiWitch_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PsiWitch_ABA_RedFirstAction, Child[2]=PsiWitch_ABA_RedLastAction)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PsiWitch_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenPsiMindControl,      Child[1]=TryMoveThenDimensionalRift,      Child[2]=TryMoveThenNullLance,      Child[3]=DoIfFlankedMove,      Child[4]=MoveDefensive,      Child[5]=PsiWitchAttackSequencer_ABA,      Child[6]=HuntEnemyWithCover,      Child[7]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PsiWitch_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=PsiWitch_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=PsiWitchAttackSequencer_ABA,      Child[1]=MoveDefensive,      Child[2]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=PsiWitchAttackSequencer_ABA, NodeType=Selector,      Child[0]=TryPsiMindControl,      Child[1]=TryDimensionalRift,      Child[2]=TryNullLance,      Child[3]=TryShootOrReloadOrOverwatch_ABA)

; --- Turret, Better AI
+Behaviors=(BehaviorName="AdventTurret_ABA::CharacterRoot", NodeType=Selector, Child[0]=Turret_ABA_RedAlert, Child[1]=SkipMove) ; , Child[1]=TryOverwatch)
+Behaviors=(BehaviorName=Turret_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Turret_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Turret_ABA_RedAbilitySelector, NodeType=Selector,      Child[0]=MimicBeaconBehavior,      Child[1]=Turret_ABA_RedFirstActionSelector, Child[2]=ShootWhenFlanking, Child[3]=ShootWhenSureShot, Child[4]=TryOverwatch, Child[5]=NeedsReload)
+Behaviors=(BehaviorName=Turret_ABA_RedFirstActionSelector, NodeType=Sequence,      Child[0]=NotLastActionPoint,      Child[1]=Turret_ABA_TryShootOrReload)
+Behaviors=(BehaviorName=Turret_ABA_TryShootOrReload, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=ShootWhenKillShot, Child[2]=ShootWhenSureShot, Child[3]=Turret_ShootIfAvailable, Child[4]=NeedsReload)

; --- Andromedon, Better AI
+Behaviors=(BehaviorName="Andromedon_ABA::CharacterRoot", NodeType=Selector, Child[0]=AndromedonRobotBranch, Child[1]=Andromedon_ABA_Root)
+Behaviors=(BehaviorName=Andromedon_ABA_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Andromedon_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Andromedon_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Andromedon_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Andromedon_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Andromedon_ABA_RedFirstAction, Child[2]=Andromedon_ABA_RedLastAction)
+Behaviors=(BehaviorName=Andromedon_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Andromedon_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Andromedon_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=MaybeMelee50,      Child[1]=TryMoveThenAcidBlob,      Child[2]=MaybeMelee50,      Child[3]=SelectMoveStandard,      Child[4]=TryStandardMelee,      Child[5]=DoIfFlankedMove,      Child[6]=TryShootOrReloadOrOverwatch_ABA,      Child[7]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Andromedon_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Andromedon_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Andromedon_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=MaybeMelee50,      Child[1]=TryAcidBlob,      Child[2]=MaybeMelee50,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=MoveAggressive,      Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MaybeMelee50, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=50)


; --- Archon, Better AI
+Behaviors=(BehaviorName="Archon_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Archon_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Archon_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Archon_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Archon_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Archon_ABA_RedFirstAction, Child[2]=Archon_ABA_RedLastAction)
+Behaviors=(BehaviorName=Archon_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Archon_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=Archon_ABA_FirstActionSelector, NodeType=Selector,      Child[0]=TryFrenziedMoveAndAttack,      Child[1]=TryMoveThenBlazingPinions,      Child[2]=TryStandardMelee,      Child[3]=DoIfFlankedMove,      Child[4]=SelectMoveStandard,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Archon_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Archon_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Archon_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryFrenziedAttack,      Child[1]=TryBlazingPinions,      Child[2]=TryStandardMelee,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=HuntEnemy,      Child[5]=SelectMoveStandard)

; Ragnarok
+Behaviors=(BehaviorName=HasMultipleRagnarokTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-Ragnarok, Param[1]=">=", Param[2]=2)
+Behaviors=(BehaviorName=HasAnyRagnarokTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-Ragnarok, Param[1]=">=", Param[2]=1)
+Behaviors=(BehaviorName=TryRagnarokOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-Ragnarok, Child[1]=HasMultipleRagnarokTargets, Child[2]=SelectAbility-Ragnarok)
+Behaviors=(BehaviorName=TryRagnarokOnAnyTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-Ragnarok, Child[1]=HasAnyRagnarokTargets, Child[2]=SelectAbility-Ragnarok)
+Behaviors=(BehaviorName=MaybeRagnarokSingle, NodeType=RandFilter, Child[0]=TryRagnarokOnAnyTarget, Param[0]=30)


; Archon Valkyrie
+Behaviors=(BehaviorName="Archon_Ragnarok::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Archon_Ragnarok_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Archon_Ragnarok_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Archon_Ragnarok_RedAbilitySelector)
+Behaviors=(BehaviorName=Archon_Ragnarok_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Archon_Ragnarok_RedFirstAction, Child[2]=Archon_Ragnarok_RedLastAction)
+Behaviors=(BehaviorName=Archon_Ragnarok_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Archon_Ragnarok_FirstActionSelector)
+Behaviors=(BehaviorName=Archon_Ragnarok_FirstActionSelector, NodeType=Selector,      Child[0]=TryRagnarokOnMultipleTargets,      Child[1]=TryFrenziedMoveAndAttack,      Child[2]=TryMoveThenBlazingPinions,      Child[3]=TryStandardMelee,      Child[4]=DoIfFlankedMove,      Child[5]=SelectMoveStandard,      Child[6]=TryShootOrReloadOrOverwatch_ABA,      Child[7]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Archon_Ragnarok_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Archon_Ragnarok_RedLastActionSelector)
+Behaviors=(BehaviorName=Archon_Ragnarok_RedLastActionSelector, NodeType=Selector,      Child[0]=TryRagnarokOnMultipleTargets,      Child[1]=MaybeRagnarokSingle,      Child[2]=TryFrenziedAttack,      Child[3]=TryBlazingPinions,      Child[4]=TryStandardMelee,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=HuntEnemy,      Child[7]=SelectMoveStandard)

; Archon Sentinel
+Behaviors=(BehaviorName="Archon_Sentinel::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Archon_Sentinel_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Archon_Sentinel_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Archon_Sentinel_RedAbilitySelector)
+Behaviors=(BehaviorName=Archon_Sentinel_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Archon_Sentinel_RedFirstAction, Child[2]=Archon_Sentinel_RedLastAction)
+Behaviors=(BehaviorName=Archon_Sentinel_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Archon_Sentinel_FirstActionSelector)
+Behaviors=(BehaviorName=Archon_Sentinel_FirstActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,      Child[1]=Fallback,      Child[2]=TryOverwatch,     Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=SelectMoveStandard)
+Behaviors=(BehaviorName=Archon_Sentinel_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Archon_Sentinel_RedLastActionSelector)
+Behaviors=(BehaviorName=Archon_Sentinel_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,      Child[1]=TryOverwatch,    Child[2]=TryShootOrReloadOrOverwatch_ABA,      Child[3]=Fallback,      Child[4]=SelectMoveStandard)

; - GenericGreenMovement for Berserker forces attacks on friendlies when a Device is around. This is the fix. It will make Berserkers attack priority targets only in Terror missions.
+Behaviors=(BehaviorName=GenericGreenMovement_NoDevice, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=GreenAlertActionSelector_NoDevice)
+Behaviors=(BehaviorName=GreenAlertActionSelector_NoDevice, NodeType=Selector, Child[0]=TryAttackPriorityTarget_NoDevice, Child[1]=SSSelectGreenAlertAction)
+Behaviors=(BehaviorName=TryAttackPriorityTarget_NoDevice, NodeType=Sequence, Child[0]=HasPriorityTargetUnit, Child[1]=IsMissionOfType-Terror, Child[2]=AttackPriorityTarget) 

; --- Berserker, Better AI 
+Behaviors=(BehaviorName="Berserker_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement_NoDevice, Child[2]=BerserkerMeleeRedAlert, Child[3]=GenericAlertHandler)



; Firestarter 
+Behaviors=(BehaviorName="BerserkerFire::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement_NoDevice, Child[2]=BerserkerFireMeleeRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=BerserkerFireMeleeRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=BerserkerFire_RedAbilitySelector)
+Behaviors=(BehaviorName=BerserkerFire_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=BerserkerFireRedFirstAction, Child[2]=BerserkerFireRedLastAction);
+Behaviors=(BehaviorName=BerserkerFireRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=BerserkerFireRedFirstActionSelector)
+Behaviors=(BehaviorName=BerserkerFireRedFirstActionSelector, NodeType=Selector,      Child[0] = TryFirebreath,    Child[1]=MoveMeleeDashFANATICUnsafe,      Child[2]=HuntEnemyUnsafe)
+Behaviors=(BehaviorName=BerserkerFireRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=BerserkerFireRedLastActionSelector)
+Behaviors=(BehaviorName=BerserkerFireRedLastActionSelector, NodeType=Selector,      Child[0] = TryFirebreath,    Child[1]=StandardMeleeAttack,      Child[2]=MoveMeleeDashFANATICUnsafe,      Child[3]=HuntEnemyUnsafe)

; --- Codex, Better AI
+Behaviors=(BehaviorName="Codex_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Codex_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Codex_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Codex_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Codex_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior,  Child[1]=Codex_ABA_RedFirstAction, Child[2]=Codex_ABA_RedLastAction)
+Behaviors=(BehaviorName=Codex_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Codex_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Codex_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenPsiBomb,      Child[1]=DoIfFlankedMove_Teleport,      Child[2]=TryTeleportDefensive,      Child[3]=MoveDefensive,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Codex_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Codex_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Codex_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryPsiBomb,      Child[1]=TryShootOrReloadOrOverwatch_ABA,      Child[2]=HuntEnemyWithCover,      Child[3]=Fallback)

; --- Codex abilities
+Behaviors=(BehaviorName=TryCloneOrTPOption, NodeType=RandSelector, Child[0]=TryCloneByHP, Param[0]=66, Child[1]=TryTeleportDefensive, Param[1]=34)
+Behaviors=(BehaviorName=TryCloneByHP, NodeType=Sequence, Child[0]=HasMinimumHP, Child[1]=AnyLivingEnemyVisible, Child[2]=SelectAbility-TriggerSuperposition)
+Behaviors=(BehaviorName=TryCloneM4, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SelectAbility-TriggerSuperposition)
+Behaviors=(BehaviorName=HasMinimumHP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">", Param[2]="20%")

+Behaviors=(BehaviorName=TryPersonalShield_Codex, NodeType=Sequence, Child[0]=IsAbilityAvailable-Codex_PersonalShield, Child[1]=SelectAbility-Codex_PersonalShield)


; Codex ICE
+Behaviors=(BehaviorName="Codex_ICE::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Codex_ICE_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Codex_ICE_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Codex_ICE_RedAbilitySelector)
+Behaviors=(BehaviorName=Codex_ICE_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior,  Child[1]=Codex_ICE_RedFirstAction, Child[2]=Codex_ICE_RedLastAction)
+Behaviors=(BehaviorName=Codex_ICE_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Codex_ICE_RedFirstActionSelector)
+Behaviors=(BehaviorName=Codex_ICE_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove_Teleport,      Child[1]=TryTeleportOffensive,      Child[2]=MoveAggressive,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Codex_ICE_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Codex_ICE_RedLastActionSelector)
+Behaviors=(BehaviorName=Codex_ICE_RedLastActionSelector, NodeType=Selector,      Child[0]=TryShootOrReloadOrOverwatch_ABA,      Child[1]=HuntEnemyWithCover,      Child[2]=MoveAggressive)

; Codex Splitter
+Behaviors=(BehaviorName="Codex_Splitter::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Codex_Splitter_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Codex_Splitter_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Codex_Splitter_RedAbilitySelector)
+Behaviors=(BehaviorName=Codex_Splitter_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior,  Child[1]=Codex_Splitter_RedFirstAction, Child[2]=Codex_Splitter_RedLastAction)
+Behaviors=(BehaviorName=Codex_Splitter_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Codex_Splitter_RedFirstActionSelector)
+Behaviors=(BehaviorName=Codex_Splitter_RedFirstActionSelector, NodeType=Selector,  Child[0]=TryCloneorTPOption,   Child[1]=DoIfFlankedMove_Teleport,      Child[2]=TryTeleportDefensive,      Child[3]=MoveAdvanceToCover,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Codex_Splitter_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Codex_Splitter_RedLastActionSelector)
+Behaviors=(BehaviorName=Codex_Splitter_RedLastActionSelector, NodeType=Selector,      Child[0]=TryShootOrReloadOrOverwatch_ABA,      Child[1]=HuntEnemyWithCover,      Child[2]=MoveDefensive)

; --- Muton, Better AI
+Behaviors=(BehaviorName="Muton_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Muton_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Muton_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Muton_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Muton_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Muton_ABA_RedFirstAction, Child[2]=Muton_ABA_RedLastAction)
+Behaviors=(BehaviorName=Muton_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Muton_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Muton_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryMoveThenGrenade,      Child[2]=TryMoveToSuppressClosest,      Child[3]=TryTwoTurnAttackSupportIfSafe,      Child[4]=MoveFlanking,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Muton_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Muton_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Muton_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,      Child[1]=MaybeSuppressClosestOnBadShot,  Child[2]=TryGrenade_Aggressive,     Child[3]=ShootWhenKillShot,       Child[4]=ShootWhenSureShot,      Child[5]=TryBayonet,        Child[6]=TrySuppressClosest,     Child[7]=OverwatchOverride,      Child[8]=TryShootOrReloadOrOverwatch,      Child[9]=HuntEnemyWithCover,      Child[10]=MoveAggressive)

; Muton Champion
+Behaviors=(BehaviorName="Muton_Champion::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Muton_Champion_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Muton_Champion_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Muton_Champion_RedAbilitySelector)
+Behaviors=(BehaviorName=Muton_Champion_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Muton_Champion_RedFirstAction, Child[2]=Muton_Champion_RedLastAction)
+Behaviors=(BehaviorName=Muton_Champion_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Muton_Champion_RedFirstActionSelector)
+Behaviors=(BehaviorName=Muton_Champion_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryPersonalShield_ABA, Child[2]=TryWarCryOnMultipleTargets_ABA,      Child[3]=TryMoveThenGrenade,      Child[4]=TryMoveToSuppressClosest,      Child[5]=TryTwoTurnAttackSupportIfSafe,      Child[6]=TryShootOrReloadOrOverwatch_ABA, Child[7]=MoveFlanking,      Child[8]=TryWarCryOnFewTargets_ABA,      Child[9]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Muton_Champion_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Muton_Champion_RedLastActionSelector)
+Behaviors=(BehaviorName=Muton_Champion_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,      Child[1]=TryWarCryOnMultipleTargets_ABA,      Child[2]=TakePriorityShots,    Child[3]=CheckForInitiateSuppression,  Child[4]=TryGrenade_Aggressive,      Child[5]=TryBayonet,     Child[6]=TryShootOrReloadOrOverwatch_ABA,      Child[7]=HuntEnemyWithCover,      Child[8]=MoveAggressive)

; Muton Captain
+Behaviors=(BehaviorName="Muton_Captain::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Muton_Captain_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Muton_Captain_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Muton_Captain_RedAbilitySelector)
+Behaviors=(BehaviorName=Muton_Captain_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Muton_Captain_RedFirstAction, Child[2]=Muton_Captain_RedLastAction)
+Behaviors=(BehaviorName=Muton_Captain_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Muton_Captain_RedFirstActionSelector)
+Behaviors=(BehaviorName=Muton_Captain_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryPersonalShield_ABA,      Child[2]=TryWarCryOnMultipleTargets_ABA,      Child[3]=MoveAggressiveFlank,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=TryMoveThenGrenade,      Child[6]=TryTwoTurnAttackSupportIfSafe,      Child[7]=MoveAggressive,      Child[8]=TryWarCryOnFewTargets_ABA,      Child[9]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Muton_Captain_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Muton_Captain_RedLastActionSelector)
+Behaviors=(BehaviorName=Muton_Captain_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,      Child[1]=TryWarCryOnMultipleTargets_ABA,      Child[2]=TakePriorityShots,    Child[3]=CheckForInitiateSuppression,  Child[4]=TryGrenade_Aggressive,      Child[5]=TryBayonet,     Child[6]=TryShootOrReloadOrOverwatch_ABA,      Child[7]=HuntEnemyWithCover,      Child[8]=MoveAggressive)

+Behaviors=(BehaviorName=HasMultipleWarCryTargets_ABA, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-Muton_WarCry, Param[1]=">=", Param[2]=3) ; Param[2] count includes self.
+Behaviors=(BehaviorName=HasFewWarCryTargets_ABA, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-Muton_WarCry, Param[1]=">=", Param[2]=2) ; Param[2] count includes self.
+Behaviors=(BehaviorName=IsTargetInMovementRange-Muton_WarCry, NodeType=Condition)



+Behaviors=(BehaviorName=SelectPotentialTargetForWarCry_ABA, NodeType=Sequence, Child[0]=SetPotentialAllyTargetStack, Child[1]=SelectBestAllyTargetForWarCry_ABA, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestAllyTargetForWarCry_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialWarCryTarget_ABA)
+Behaviors=(BehaviorName=EvaluatePotentialWarCryTarget_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForWarCry_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForWarCry_ABA, NodeType=Successor, Child[0]=TargetScoreReachableForWarCry_ABA)
+Behaviors=(BehaviorName=TargetScoreReachableForWarCry_ABA, NodeType=Sequence, Child[0]=IsTargetInMovementRange-Muton_WarCry, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=ScoreByHP)
+Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP)
+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=10)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=1)


; --- Sectoid, Better AI
+Behaviors=(BehaviorName="Sectoid_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectoid_ABA_RedAlert, Child[3]=SectoidNoEnemySightedMove)
+Behaviors=(BehaviorName=Sectoid_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Sectoid_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Sectoid_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Sectoid_ABA_RedFirstAction, Child[2]=Sectoid_ABA_RedLastAction)
+Behaviors=(BehaviorName=Sectoid_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Sectoid_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Sectoid_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=MoveStayBack,      Child[2]=ShootWhenFlanking,  Child[3]=TryPsiReanimationOrMindSpinOption_ABA,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Sectoid_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Sectoid_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Sectoid_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking,  Child[1]=TryPsiReanimationOrMindSpinOption_ABA,      Child[2]=TryShootOrReloadOrOverwatch_ABA,      Child[3]=HuntEnemyWithCover,      Child[4]=MoveDefensive)

+Behaviors=(BehaviorName=TryPsiReanimationOrMindSpinOption_ABA, NodeType=Selector, Child[0]=TryMindSpinOnBadShot , Child[1]=TryPsiReanimationOrMindSpinOption_Random) 
+Behaviors=(BehaviorName=TryMindSpinOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=TryMindSpinOption)
+Behaviors=(BehaviorName=TryPsiReanimationOrMindSpinOption_Random, NodeType=RandSelector, Child[0]=TryMindSpinOption, Param[0]=50, Child[1]=TryPsiReanimation, Param[1]=30, Child[2]=TryShootOrReloadOrOverwatch_ABA, Param[2]=20)


; Cleanse ability. 
+Behaviors=(BehaviorName=TryCleanse, NodeType=Selector, Child[0]=TryCleanseMindControl, Child[1]=TryCleansePanicked, Child[2]=TryCleanseDisoriented) 




; Sectoid Trooper
+Behaviors=(BehaviorName="Sectoid_Flank::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectoid_Flank_RedAlert, Child[3]=SectoidNoEnemySightedMove)
+Behaviors=(BehaviorName=Sectoid_Flank_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Sectoid_Flank_RedAbilitySelector)
+Behaviors=(BehaviorName=Sectoid_Flank_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Sectoid_Flank_RedFirstAction, Child[2]=Sectoid_Flank_RedLastAction)
+Behaviors=(BehaviorName=Sectoid_Flank_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Sectoid_Flank_RedFirstActionSelector)
+Behaviors=(BehaviorName=Sectoid_Flank_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=MoveFlankingIfFirstAbility,      Child[2]=TryShootOrReloadOrOverwatch_ABA,      Child[3]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Sectoid_Flank_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Sectoid_Flank_RedLastActionSelector)
+Behaviors=(BehaviorName=Sectoid_Flank_RedLastActionSelector, NodeType=Selector,      Child[0]=TryShootOrReloadOrOverwatch_ABA,      Child[1]=HuntEnemyWithCover,      Child[2]=MoveAggressive)

; Sectoid Mindbender
+Behaviors=(BehaviorName="Sectoid_Comm::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectoid_Comm_RedAlert, Child[3]=SectoidNoEnemySightedMove)
+Behaviors=(BehaviorName=Sectoid_Comm_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Sectoid_Comm_RedAbilitySelector)
+Behaviors=(BehaviorName=Sectoid_Comm_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Sectoid_Comm_RedFirstAction, Child[2]=Sectoid_Comm_RedLastAction)
+Behaviors=(BehaviorName=Sectoid_Comm_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Sectoid_Comm_RedFirstActionSelector)
+Behaviors=(BehaviorName=Sectoid_Comm_RedFirstActionSelector, NodeType=Selector, Child[0]=DoIfFlankedMove_StayBack, Child[1]=TryCleanse, Child[2]=TryMindSpinOption, Child[3]=ShootWhenFlanking, Child[4]=TryShootOrReloadOrOverwatch_ABA, Child[5]=MoveDefensive)
+Behaviors=(BehaviorName=Sectoid_Comm_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Sectoid_Comm_RedLastActionSelector)
+Behaviors=(BehaviorName=Sectoid_Comm_RedLastActionSelector, NodeType=Selector, Child[0]=TryCleanse, Child[1]=TryMindSpinOption, Child[2]=ShootWhenFlanking, Child[3]=TryShootOrReloadOrOverwatch_ABA, Child[4]=MoveStayBack)

; Sectoid Puppeteer
+Behaviors=(BehaviorName="Sectoid_Summon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectoid_Summon_RedAlert, Child[3]=SectoidNoEnemySightedMove)
+Behaviors=(BehaviorName=Sectoid_Summon_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Sectoid_Summon_RedAbilitySelector)
+Behaviors=(BehaviorName=Sectoid_Summon_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Sectoid_Summon_RedFirstAction, Child[2]=Sectoid_Summon_RedLastAction)
+Behaviors=(BehaviorName=Sectoid_Summon_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Sectoid_Summon_RedFirstActionSelector)
+Behaviors=(BehaviorName=Sectoid_Summon_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove_StayBack,      Child[1]=ShootWhenFlanking,  Child[2]=TryPsiReanimation,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=MoveStayBack)
+Behaviors=(BehaviorName=Sectoid_Summon_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Sectoid_Summon_RedLastActionSelector)
+Behaviors=(BehaviorName=Sectoid_Summon_RedLastActionSelector, NodeType=Selector,      Child[0]=ShootWhenFlanking, Child[1]=TryMindSpinOption,  Child[2]=TryPsiReanimation,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=MoveStayBack)

; Made seperate trees from all of these, in case i want to throw some probabilities in there later. Also, use MC removal on enemies, other stuff on friendlies. Don't remove MC from friendlies -.-
+Behaviors=(BehaviorName=TryCleanseMindControl, NodeType=Sequence, Child[0]=IsAbilityAvailable-Cleanse, Child[1]=SelectCleanseTargetMindControl, Child[2]=SelectAbility-Cleanse)
+Behaviors=(BehaviorName=SelectCleanseTargetMindControl, NodeType=Sequence, Child[0]=SetTargetStack-Cleanse, Child[1]=EvaluateCleanseTargetsMindControl, Child[2]=HasValidTarget-Cleanse)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsMindControl, NodeType=RepeatUntilFail, Child[0]=EvaluateCleanseTargetsMindControl_2)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsMindControl_2, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreCleanseTargetMindControl, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreCleanseTargetMindControl, NodeType=Successor, Child[0]=ScoreCleanseTargetMindControl)
+Behaviors=(BehaviorName=ScoreCleanseTargetMindControl, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MindControl, Child[1]=TargetIsEnemy, Child[2]=GenericTargetEvaluations)

+Behaviors=(BehaviorName=TryCleansePanicked, NodeType=Sequence, Child[0]=IsAbilityAvailable-Cleanse, Child[1]=SelectCleanseTargetPanicked, Child[2]=SelectAbility-Cleanse)
+Behaviors=(BehaviorName=SelectCleanseTargetPanicked, NodeType=Sequence, Child[0]=SetTargetStack-Cleanse, Child[1]=EvaluateCleanseTargetsPanicked, Child[2]=HasValidTarget-Cleanse)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsPanicked, NodeType=RepeatUntilFail, Child[0]=EvaluateCleanseTargetsPanicked_2)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsPanicked_2, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreCleanseTargetPanicked, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreCleanseTargetPanicked, NodeType=Successor, Child[0]=ScoreCleanseTargetPanicked)
+Behaviors=(BehaviorName=ScoreCleanseTargetPanicked, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Panicked, Child[1]=TargetIsAlly, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotMindControlled, Child[4]=GenericTargetEvaluations)

+Behaviors=(BehaviorName=TryCleanseDisoriented, NodeType=Sequence, Child[0]=IsAbilityAvailable-Cleanse, Child[1]=SelectCleanseTargetDisoriented, Child[2]=SelectAbility-Cleanse)
+Behaviors=(BehaviorName=SelectCleanseTargetDisoriented, NodeType=Sequence, Child[0]=SetTargetStack-Cleanse, Child[1]=EvaluateCleanseTargetsDisoriented, Child[2]=HasValidTarget-Cleanse)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsDisoriented, NodeType=RepeatUntilFail, Child[0]=EvaluateCleanseTargetsDisoriented_2)
+Behaviors=(BehaviorName=EvaluateCleanseTargetsDisoriented_2, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreCleanseTargetDisoriented, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreCleanseTargetDisoriented, NodeType=Successor, Child[0]=ScoreCleanseTargetDisoriented)
+Behaviors=(BehaviorName=ScoreCleanseTargetDisoriented, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Disoriented, Child[1]=TargetIsAlly, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotMindControlled, Child[4]=GenericTargetEvaluations)

; --- Viper, Better AI
+Behaviors=(BehaviorName="Viper_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Viper_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Viper_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Viper_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Viper_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Viper_ABA_RedFirstAction, Child[2]=Viper_ABA_RedLastAction)
+Behaviors=(BehaviorName=Viper_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Viper_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Viper_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=ConsiderTonguePullPriorityOrMelee,      Child[1]=TryGetOverHere,      Child[2]=TryMoveThenPoisonSpit,      Child[3]=TryMoveThenPoisonSpitSingle,      Child[4]=MoveStayBack,      Child[5]=TryShootOrReloadOrOverwatch_ABA,      Child[6]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Viper_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Viper_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Viper_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryStandardMelee,      Child[1]=TryPoisonSpit,      Child[2]=TryGetOverHere,      Child[3]=TryPoisonSpitSingle,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=DoIfFlankedMove,      Child[6]=HuntEnemyWithCover,      Child[7]=MoveDefensive)

; Mamba abilities

+Behaviors=(BehaviorName=SpitWhenOnlyBadShots, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=TryPoisonSpitSingleButFirstMulti)
+Behaviors=(BehaviorName=TryPoisonSpitSingleButFirstMulti, NodeType=Selector, Child[0]=TryPoisonSpit, Child[1]=TryPoisonSpitSingle)

; Mamba
+Behaviors=(BehaviorName="Viper_Mamba::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Viper_Mamba_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Viper_Mamba_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Viper_Mamba_RedAbilitySelector)
+Behaviors=(BehaviorName=Viper_Mamba_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Viper_Mamba_RedFirstAction, Child[2]=Viper_Mamba_RedLastAction)
+Behaviors=(BehaviorName=Viper_Mamba_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Viper_Mamba_RedFirstActionSelector)
+Behaviors=(BehaviorName=Viper_Mamba_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove_StayBack,      Child[1]=NeedsReload,      Child[2]=MoveStayBack,      Child[3]=TryFinishHim,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=Fallback)
+Behaviors=(BehaviorName=Viper_Mamba_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Viper_Mamba_RedLastActionSelector)
+Behaviors=(BehaviorName=Viper_Mamba_RedLastActionSelector, NodeType=Selector,      Child[0]=SpitWhenOnlyBadShots,      Child[1]=TryFinishHim,      Child[2]=TryShootOrReloadOrOverwatch_ABA,      Child[3]=MoveStayBack)

; Wyvern
+Behaviors=(BehaviorName="Wyvern::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Wyvern_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Wyvern_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Wyvern_RedAbilitySelector)
+Behaviors=(BehaviorName=Wyvern_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Wyvern_RedFirstAction, Child[2]=Wyvern_RedLastAction)
+Behaviors=(BehaviorName=Wyvern_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Wyvern_RedFirstActionSelector)
+Behaviors=(BehaviorName=Wyvern_RedFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenPoisonSpit,      Child[1]=TryMoveThenPoisonSpitSingle,      Child[2]=MoveFlanking,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Wyvern_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Wyvern_RedLastActionSelector)
+Behaviors=(BehaviorName=Wyvern_RedLastActionSelector, NodeType=Selector,      Child[0]=TryStandardMelee,      Child[1]=TryPoisonSpit,      Child[2]=TryPoisonSpitSingle,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=DoIfFlankedMove,      Child[5]=HuntEnemyWithCover,      Child[6]=MoveDefensive)

; Boa
+Behaviors=(BehaviorName="ViperBoa::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperBoa_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=ViperBoa_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ViperBoa_RedAbilitySelector)
+Behaviors=(BehaviorName=ViperBoa_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperBoa_RedFirstAction, Child[2]=ViperBoa_RedLastAction)
+Behaviors=(BehaviorName=ViperBoa_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ViperBoa_RedFirstActionSelector)
+Behaviors=(BehaviorName=ViperBoa_RedFirstActionSelector, NodeType=Selector,      Child[0]=KeepBindUp,      Child[1]=DoIfFlankedMove,     Child[2]=TryGetOverHere,      Child[3]=TryMoveThenPoisonSpit,      Child[4]=TryMoveThenPoisonSpitSingle,      Child[5]=MoveFlanking,      Child[6]=TryShootOrReloadOrOverwatch_ABA,      Child[7]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=ViperBoa_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ViperBoa_RedLastActionSelector)
+Behaviors=(BehaviorName=ViperBoa_RedLastActionSelector, NodeType=Selector,      Child[0]=TryStandardMelee,      Child[1]=TryPoisonSpit,      Child[2]=TryGetOverHere,      Child[3]=TryPoisonSpitSingle,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=DoIfFlankedMove,      Child[6]=HuntEnemyWithCover,      Child[7]=MoveDefensive)
+Behaviors=(BehaviorName=KeepBindUp, NodeType=Sequence, Child[0]=AffectedByEffect-Bind, Child[1]=SkipMove)

; --- Sectopod, Better AI
+Behaviors=(BehaviorName="Sectopod_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Sectopod_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Sectopod_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Sectopod_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Sectopod_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Sectopod_ABA_RedFirstAction, Child[2]=Sectopod_ABA_RedSecondAction, Child[3]=Sectopod_ABA_RedLastAction)
+Behaviors=(BehaviorName=Sectopod_ABA_RedFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=Sectopod_ABA_FirstActionSelector)
+Behaviors=(BehaviorName=Sectopod_ABA_FirstActionSelector, NodeType=Selector,     Child[0]=SectopodCannonCharging,      Child[1]=TryStandUp,     Child[2]=TryLightningField,      Child[3]=TryShootOrReload,      Child[4]=TryMoveForLightningField,      Child[5]=MoveNoCover, Child[6]=HuntEnemy)
+Behaviors=(BehaviorName=Sectopod_ABA_RedSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Sectopod_ABA_SecondActionSelector)
+Behaviors=(BehaviorName=Sectopod_ABA_SecondActionSelector, NodeType=Selector,     Child[0]=SectopodCannonCharging,      Child[1]=TryStandUp,     Child[2]=TryLightningField,      Child[3]=TryShootOrReload,      Child[4]=TryMoveForLightningField,      Child[5]=MoveNoCoverIfNotMoved,      Child[6]=HuntEnemy)
+Behaviors=(BehaviorName=Sectopod_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Sectopod_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Sectopod_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=SectopodCannonCharging,      Child[1]=TryWrathCannonS1,      Child[2]=TryLightningField,      Child[3]=TryShootOrReloadOrOverwatch_ABA,      Child[4]=HuntEnemy)

; --- Advent Counter Op, Better AI
+Behaviors=(BehaviorName="AdventCounterOp_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCounterOp_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvCounterOp_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvCounterOp_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvCounterOp_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventCounterOp_ABA_RedFirstAction, Child[2]=AdventCounterOp_ABA_RedLastAction)
+Behaviors=(BehaviorName=AdventCounterOp_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventCounterOp_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdventCounterOp_ABA_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryShootOrReloadOrOverwatch_ABA,      Child[2]=SelectMove_JobOrAggressive,      Child[3]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdventCounterOp_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventCounterOp_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=AdventCounterOp_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=TryShootOrReloadOrOverwatch_ABA,      Child[1]=HuntEnemyWithCover,      Child[2]=SelectMove_JobOrAggressive)

; --- Advent Priest, Better AI
+Behaviors=(BehaviorName="AdventPriest_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Priest_ABA_RedOrangeAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName=Priest_ABA_RedOrangeAlert, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=SelectPriest_ABA_Ability)
+Behaviors=(BehaviorName=SelectPriest_ABA_Ability, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=HolyWarriorActiveBranch, Child[2]=HolyWarriorInactiveBranch, Child[3]=TryShootOrReloadOrOverwatch_ABA, Child[4]=SkipMove)

-Behaviors=(BehaviorName=TryHolyWarrior, NodeType=Sequence, Child[0]=IsAbilityAvailable-HolyWarrior, Child[1]=NotApplyingHolyWarrior, Child[2]=SelectTargetForHolyWarrior, Child[3]=SelectAbility-HolyWarrior)
+Behaviors=(BehaviorName=TryHolyWarrior, NodeType=Sequence, Child[0]=IsAbilityAvailable-HolyWarrior, Child[1]=HasHighHP, Child[2]=NotApplyingHolyWarrior, Child[3]=SelectTargetForHolyWarrior, Child[4]=SelectAbility-HolyWarrior)

-Behaviors=(BehaviorName=HolyWarriorInactiveBranch, NodeType=Selector, Child[0]=MoveDefensiveWithLoSIfFirstAbility, Child[1]=RandSelectFromPriestAbilities)
+Behaviors=(BehaviorName=HolyWarriorInactiveBranch, NodeType=Selector, Child[0]=MoveDefensiveWithLoSIfFirstAbility, Child[1]=TryHolyWarriorOnMC, Child[2]=RandSelectFromPriestAbilities)

+Behaviors=(BehaviorName=TryHolyWarriorOnMC, NodeType=Sequence, Child[0]=IsAbilityAvailable-HolyWarrior, Child[1]=NotApplyingHolyWarrior, Child[2]=SelectTargetForHolyWarriorOnMC, Child[3]=SelectAbility-HolyWarrior)

+Behaviors=(BehaviorName=SelectTargetForHolyWarriorOnMC, NodeType=Sequence, Child[0]=SetTargetStack-HolyWarrior, Child[1]=EvaluateTargetForHolyWarriorOnMC, Child[2]=HasValidTarget-HolyWarrior)
+Behaviors=(BehaviorName=EvaluateTargetForHolyWarriorOnMC, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForHolyWarriorOnMC2)
+Behaviors=(BehaviorName=EvaluateTargetForHolyWarriorOnMC2, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreTargetForHolyWarriorOnMC, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreTargetForHolyWarriorOnMC, NodeType=Successor, Child[0]=ScoreTargetForHolyWarriorOnMC)
+Behaviors=(BehaviorName=ScoreTargetForHolyWarriorOnMC, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MindControl, Child[1]=GenericTargetEvaluations)

; --- Spectre, Better AI

+Behaviors=(BehaviorName="Spectre_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Spectre_ABA_RedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName=Spectre_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SelectSpectre_ABA_Ability)
+Behaviors=(BehaviorName=SelectSpectre_ABA_Ability, NodeType=Selector, Child[0]=SelectPreselectedAbility, Child[1]=Spectre_ABA_VanishedBranch, Child[2]=VisibleSpectre_ABA_Branch, Child[3]=SkipMove )
+Behaviors=(BehaviorName=Spectre_ABA_VanishedBranch, NodeType=Sequence, Child[0]=AffectedByEffect-Vanish, Child[1]=Spectre_ABA_StealthSelector)

+Behaviors=(BehaviorName=Spectre_ABA_StealthSelector, NodeType=Selector, \\
	Child[0]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[1]=PostVanishMovement, \\
	Child[2]=TakePriorityShots, \\
	Child[3]=MoveFlankingIfFirstAbility, \\
	Child[4]=TrySpectreStealthAbility_Random, \\
	Child[5]=TryShadowbindIfNotActive, \\
	Child[6]=TryMoveThenHorror, \\
	Child[7]=AdvanceCoverMove, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=TrySpectreStealthAbility_Random, NodeType=RandSelector, Child[0]=TryShadowbindIfNotActive, Param[0]=50, Child[1]=TryMoveThenHorror, Param[1]=30, Child[2]=TryShootOrReload, Param[2]=20)

-Behaviors=(BehaviorName=TryHorrorPriority, NodeType=Sequence, Child[0]=HasAlliesOfType-Shadowbind, Child[1]=TryHorror)
+Behaviors=(BehaviorName=TryHorrorPriority, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=TryHorror)
-Behaviors=(BehaviorName=TryHorrorPriorityWithMove, NodeType=Sequence, Child[0]=HasAlliesOfType-Shadowbind, Child[1]=TryMoveThenHorror)
+Behaviors=(BehaviorName=TryHorrorPriorityWithMove, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=TryMoveThenHorror)

+Behaviors=(BehaviorName=VisibleSpectre_ABA_Branch, NodeType=Sequence, Child[0]=NotAffectedByVanish, Child[1]=Spectre_ABA_VisibleSelector)
+Behaviors=(BehaviorName=Spectre_ABA_VisibleSelector, NodeType=Selector, \\
			Child[0]=PostShadowbindMove, \\
			Child[1]=TrySpectreVisibleAbility_Random, \\
			Child[2]=TryVanish, \\
			Child[3]=TryShadowbindIfNotActive, \\
			Child[4]=TryMoveThenHorror, \\
			Child[5]=DoIfFlankedMove, \\
			Child[6]=TryShootOrReloadOrOverwatch, \\
			Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=TrySpectreVisibleAbility_Random, NodeType=RandSelector, Child[0]=TryVanish, Param[0]=50, Child[1]=TryShadowbindIfNotActive, Param[1]=30, Child[2]=TryMoveThenHorror, Param[2]=20)
-Behaviors=(BehaviorName=ChanceToVanish, NodeType=RandFilter, Child[0]=SelectAbility-Vanish, Param[0]=75)
+Behaviors=(BehaviorName=ChanceToVanish, NodeType=RandFilter, Child[0]=SelectAbility-Vanish, Param[0]=99)

; --- Purifier, Better AI ---

+Behaviors=(BehaviorName="AdventPurifier_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Purifier_ABA_RedFirstAction, Child[3]=Purifier_ABA_RedLastAction, Child[4]=GenericAlertHandler, Child[5]=SkipMove)
+Behaviors=(BehaviorName=Purifier_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=Purifier_ABA_RedFirstAction, Child[2]=Purifier_ABA_RedLastAction)

+Behaviors=(BehaviorName=Purifier_ABA_RedFirstAction, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=NotLastActionPoint, Child[2]=Purifier_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Purifier_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=IsLastActionPoint, Child[2]=Purifier_ABA_RedLastActionSelector)

+Behaviors=(BehaviorName=Purifier_ABA_RedFirstActionSelector, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=FlameThrowerPriorityOption, Child[2]=TryExplosive_prio, Child[3]=TryMoveThenGrenade, Child[4]=TryMoveThenFlameThrower, Child[5]=TryFlankedMoveThenFlameThrower, Child[6]=TryShootOrReloadOrOverwatch, Child[7]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Purifier_ABA_RedLastActionSelector, NodeType=Selector,	Child[0]=FlameThrowerPriorityOption, Child[1]=TryGrenade_JustHitSomething, Child[2]=TryFlameThrower, Child[3]=TryFlankedMoveThenFlameThrower, Child[4]=TryShootOrReloadOrOverwatch, Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=TryFlameThrowerMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvPurifierFlamethrower, Child[1]=FlameThrower_MultipleTargets, Child[2]=SelectAbility-AdvPurifierFlamethrower)


;------ CHryssalids, Better AI------------
; Spawning
+Behaviors=(BehaviorName=TrySpawnChryssalidM1_Mommy, NodeType=Sequence, Child[0]=IsAbilityAvailable-SpawnABAChryssalidM1ForMommy, Child[1]=SelectAbility-SpawnABAChryssalidM1ForMommy)
+Behaviors=(BehaviorName=TrySpawnChryssalidM2_Mommy, NodeType=Sequence, Child[0]=IsAbilityAvailable-SpawnABAChryssalidM2ForMommy, Child[1]=SelectAbility-SpawnABAChryssalidM2ForMommy)
+Behaviors=(BehaviorName=TrySpawnChryssalidM3_Mommy, NodeType=Sequence, Child[0]=IsAbilityAvailable-SpawnABAChryssalidM3ForMommy, Child[1]=SelectAbility-SpawnABAChryssalidM3ForMommy)
+Behaviors=(BehaviorName=TrySpawnChryssalidM4_Mommy, NodeType=Sequence, Child[0]=IsAbilityAvailable-SpawnABAChryssalidM4ForMommy, Child[1]=SelectAbility-SpawnABAChryssalidM4ForMommy)
+Behaviors=(BehaviorName=TryRandomSpawnChryssalid_Mommy, NodeType=RandSelector, Child[0]=TrySpawnChryssalidM1_Mommy, Param[0]=10, Child[1]=TrySpawnChryssalidM2_Mommy, Param[1]=45, Child[2]=TrySpawnChryssalidM3_Mommy, Param[2]=35, Child[3]=TrySpawnChryssalidM4_Mommy, Param[3]=10)
+Behaviors=(BehaviorName=TryRandomSpawnChryssalidorMove_Mommy, NodeType=RandSelector, Child[0]=TryRandomSpawnChryssalid_Mommy, Param[0]=50, Child[1]=MoveMelee, Param[1]=50)

; Poisonous?
+Behaviors=(BehaviorName=IsPoisonous, NodeType=Selector, Child[0]=TemplateNameIs-Chryssalid, Child[1]=TemplateNameIs-ABAChryssalidM4, Child[2]=TemplateNameIs-ChryssalidDaddy)
+Behaviors=(BehaviorName=TemplateNameIs-Chryssalid, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ABAChryssalidM4, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChryssalidDaddy, NodeType=Condition)

; Chryssalids attacking Civilians, only if poisonous and only on Terror missions - 25%
+Behaviors=(BehaviorName=TryMeleeDashOnCivilian_ABA, NodeType=Sequence, Child[0]=HasRevealed, Child[1]=IsPoisonous, Child[2]=IsMissionOfType-Terror, Child[3]=Rand25AttackCivilian)
+Behaviors=(BehaviorName=Rand25AttackCivilian, NodeType=RandFilter, Child[0]=MeleeAttackRandomCivilian_ABA, Param[0]=25)
+Behaviors=(BehaviorName=MeleeAttackRandomCivilian_ABA, NodeType=Sequence, Child[0]=SetCiviliansAsEnemiesInMoveCalculation, Child[1]=SelectRandomCivilianInRange_ABA, Child[2]=SelectAbility-StandardMelee)
+Behaviors=(BehaviorName=SelectRandomCivilianInRange_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectRandomCivilianForStandardMelee_ABA, Child[2]=HasValidTarget-StandardMelee)
+Behaviors=(BehaviorName=SelectRandomCivilianForStandardMelee_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateMeleeTargetForTargetCivilian_ABA)
+Behaviors=(BehaviorName=EvaluateMeleeTargetForTargetCivilian_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreChryssalidCivilianIfInRange_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetScoreChryssalidCivilianIfInRange_ABA, NodeType=Successor, Child[0]=ScoreChryssalidCivilianIfInRange_ABA)
+Behaviors=(BehaviorName=ScoreChryssalidCivilianIfInRange_ABA, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=TargetIsNotAlien, Child[2]=GenericScoreTargetRandomlySequence, Child[3]=AddToTargetScore_1000)

; Chryssalid Green and Yellow Movement. No Burrow.
+Behaviors=(BehaviorName=ChryssalidGreenAlert_ABA, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=ChryssalidGreenAbilitySelector_ABA)
+Behaviors=(BehaviorName=ChryssalidGreenAbilitySelector_ABA, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement)
+Behaviors=(BehaviorName=ChryssalidYellowAlert_ABA, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=ChryssalidYellowAbilitySelector_ABA)
+Behaviors=(BehaviorName=ChryssalidYellowAbilitySelector_ABA, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=TryJobUnsafe, Child[2]=GenericAlertHandler, Child[3]=SkipMove)

; Generic Chryssalid. Moves, attacks in melee, burrows
+Behaviors=(BehaviorName="Chryssalid_ABA::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=Chryssalid_ABA_Root)
+Behaviors=(BehaviorName=Chryssalid_ABA_Root, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=SkipIfBurrowed, Child[2]=TryJobTerrorist, Child[3]=TryJobChargerUnsafe, Child[4]=ChryssalidGreenAlert_ABA, Child[5]=Chryssalid_ABA_RedAlert, Child[6]=ChryssalidYellowAlert_ABA)
;+Behaviors=(BehaviorName=Chryssalid_ABA_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Chryssalid_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Chryssalid_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Chryssalid_ABA_RedAbilitySelector)
; check for mimic beacon and check for civvie attack before going into main branch
+Behaviors=(BehaviorName=Chryssalid_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=MimicBeaconBehavior, Child[2]=TryMeleeDashOnCivilian_ABA, Child[3]=Chryssalid_ABA_RedActionSelector)
; if unit is unburrowed and can't burrow, attack right away. otherwise vanilla melee vs burrow check
+Behaviors=(BehaviorName=Chryssalid_ABA_RedActionSelector, NodeType=Selector, Child[0]=TryMeleeOnCivilian, Child[1]=TryStandardMeleeDashFANATICUnsafe, Child[2]=HuntEnemyUnsafe)
+Behaviors=(BehaviorName=IfNotBurrowThenAttack, NodeType=Sequence, Child[0]=CantBurrow, Child[1]=IsUnBurrowed, Child[2]=TryStandardMeleeDashFANATICUnsafe, Child[3]=MoveMelee)
+Behaviors=(BehaviorName=CantBurrow, NodeType=Inverter, Child[0]=IsAbilityAvailable-ChryssalidBurrow)

; Chryssalid Queen
+Behaviors=(BehaviorName="Chryssalid_Mommy::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Chryssalid_Mommy_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Chryssalid_Mommy_RedAbilitySelector)
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Chryssalid_Mommy_RedFirstAction, Child[2]=Chryssalid_Mommy_RedLastAction)
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Chryssalid_Mommy_RedFirstActionSelector)
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Chryssalid_Mommy_RedLastActionSelector)
; On first action, spawn a Chryssalid. 
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedFirstActionSelector, NodeType=Selector, Child[0]=TryRandomSpawnChryssalid_Mommy, Child[1]=TryStandardMeleeDashFANATICUnsafe, Child[2]=MoveMelee)
; On second action, try attacking. If not possible, 50/50 to move or spawn
+Behaviors=(BehaviorName=Chryssalid_Mommy_RedLastActionSelector, NodeType=Selector, Child[0]=StandardMeleeAttack, Child[1]=TryRandomSpawnChryssalidorMove_Mommy, Child[2]=MoveMelee)


; ----- ABA Advent Drones

+Behaviors=(BehaviorName="AdvDrone::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ABA_DroneRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=ABA_DroneRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ABA_DroneRedAbilitySelector)
+Behaviors=(BehaviorName=ABA_DroneRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ABA_DroneRedFirstAction, Child[2]=ABA_DroneRedLastAction)
+Behaviors=(BehaviorName=ABA_DroneRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ABA_DroneRedFirstActionSelector)
+Behaviors=(BehaviorName=ABA_DroneRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=ABA_TryHighPriorityShock, \\
	Child[1]=ABA_TryMoveForDroneHeal, \\
	Child[2]=ABA_TryMoveForDroneMeleeStun, \\
	Child[3]=ABA_TryDroneFlankingMove, \\
	Child[4]=ABA_TryDroneRegularMove, \\
	Child[5]=HuntEnemyUnsafe)
+Behaviors=(BehaviorName=ABA_DroneRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ABA_DroneRedLastActionSelector)
+Behaviors=(BehaviorName=ABA_DroneRedLastActionSelector, NodeType=Selector, \\
	Child[0]=ABA_TryHighPriorityShock, \\
	Child[1]=ABA_TryHealOrShock, \\
	Child[2]=ABA_TryMeleeStun, \\
	Child[3]=ABA_ShockIfAvailable, \\
	Child[4]=HuntEnemyUnsafe, \\
	Child[5]=ABA_TryDroneRegularMove) 

+Behaviors=(BehaviorName=ABA_TryDroneFlankingMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=SetNoCoverMovement, Child[4]=RestrictToAbilityRange-AdvDroneShock, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ABA_TryDroneRegularMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=RestrictToAbilityRange-AdvDroneShock, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ABA_TryHighPriorityShock, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvDroneShock, Child[1]=ABA_HaveHighPriorityShockTarget, Child[2]=ABA_ShockIfAvailable)
+Behaviors=(BehaviorName=ABA_HaveHighPriorityShockTarget, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneShock, Child[1]=ABA_FindHighPriorityTarget, Child[2]=HasValidTarget-AdvDroneShock)

+Behaviors=(BehaviorName=ABA_TryMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvDroneMeleeStun, Child[1]=ABA_SelectTargetForMeleeStun, Child[2]=SelectAbility-AdvDroneMeleeStun)

+Behaviors=(BehaviorName=ABA_TryRepairOrShock, NodeType=RandSelector, Child[0]=ABA_DroneRepairIfAvailable, Param[0]=60, Child[1]=ABA_ShockIfAvailable, Param[1]=40)
+Behaviors=(BehaviorName=ABA_TryHealOrShock, NodeType=RandSelector, Child[0]=ABA_DroneHealIfAvailable, Param[0]=90, Child[1]=ABA_ShockIfAvailable, Param[1]=10)

+Behaviors=(BehaviorName=ABA_ShockIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvDroneShock, Child[1]=ABA_SelectTargetForShock, Child[2]=SelectAbility-AdvDroneShock)

+Behaviors=(BehaviorName=ABA_DroneRepairIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvDroneRepair, Child[1]=ABA_SelectTargetForDroneRepair, Child[2]=SelectAbility-AdvDroneRepair)
+Behaviors=(BehaviorName=ABA_TryMoveForDroneRepair, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-AdvDroneRepair, Child[2]=ABA_SelectTargetForDroneRepair, Child[3]=ABA_MoveStandardIfFirstAbility-AdvDroneRepair)
+Behaviors=(BehaviorName=ABA_MoveStandardIfFirstAbility-AdvDroneRepair, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ABA_FindDroneRepairDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ABA_FindDroneRepairDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-AdvDroneRepair, Child[2]=FindRestrictedDestination-MWP_Fanatic)
+Behaviors=(BehaviorName=ABA_SelectTargetForDroneRepair, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneRepair, Child[1]=ABA_SelectBestTargetForDroneRepair, Child[2]=HasValidTarget-AdvDroneRepair)
+Behaviors=(BehaviorName=ABA_SelectBestTargetForDroneRepair, NodeType=RepeatUntilFail, Child[0]=ABA_EvaluateTargetsDroneRepair)
+Behaviors=(BehaviorName=ABA_EvaluateTargetsDroneRepair, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=ABA_DroneHealIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-AdvDroneHeal, Child[1]=ABA_SelectTargetForDroneHeal, Child[2]=SelectAbility-AdvDroneHeal)
+Behaviors=(BehaviorName=ABA_TryMoveForDroneHeal, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-AdvDroneHeal, Child[2]=ABA_SelectTargetForDroneHeal, Child[3]=ABA_MoveStandardIfFirstAbility-AdvDroneHeal)
+Behaviors=(BehaviorName=ABA_MoveStandardIfFirstAbility-AdvDroneHeal, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ABA_FindDroneHealDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ABA_FindDroneHealDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-AdvDroneHeal, Child[2]=FindRestrictedDestination-MWP_Fanatic)
+Behaviors=(BehaviorName=ABA_SelectTargetForDroneHeal, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneHeal, Child[1]=ABA_SelectBestTargetForDroneHeal, Child[2]=HasValidTarget-AdvDroneHeal)
+Behaviors=(BehaviorName=ABA_SelectBestTargetForDroneHeal, NodeType=RepeatUntilFail, Child[0]=ABA_EvaluateTargetsDroneHeal)
+Behaviors=(BehaviorName=ABA_EvaluateTargetsDroneHeal, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=ABA_TryMoveForDroneMeleeStun, NodeType=Sequence, Child[0]=IsAbilityReady-AdvDroneMeleeStun, Child[1]=ABA_SelectTargetForDroneMeleeStun, Child[2]=ABA_MoveStandardIfFirstAbility-AdvDroneMeleeStun)
+Behaviors=(BehaviorName=ABA_MoveStandardIfFirstAbility-AdvDroneMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ABA_FindDroneMeleeStunDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ABA_FindDroneMeleeStunDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-AdvDroneMeleeStun, Child[2]=FindRestrictedDestination-MWP_Fanatic)
+Behaviors=(BehaviorName=ABA_SelectTargetForDroneMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneMeleeStun, Child[1]=ABA_SelectBestTargetForDroneMeleeStun, Child[2]=HasValidTarget-AdvDroneMeleeStun)
+Behaviors=(BehaviorName=ABA_SelectBestTargetForDroneMeleeStun, NodeType=RepeatUntilFail, Child[0]=ABA_EvaluateTargetsDroneMeleeStun)
+Behaviors=(BehaviorName=ABA_EvaluateTargetsDroneMeleeStun, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=ABA_FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=ABA_NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=ABA_NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ABA_TargetIsNotHighPriority)
+Behaviors=(BehaviorName=ABA_TargetIsNotHighPriority, NodeType=Inverter, Child[0]=ABA_TargetIsHighPriority)
+Behaviors=(BehaviorName=ABA_TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotBound, Child[2]=ABA_TargetKillableOrFlanked, Child[3]=AddToTargetScore_1000, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=ABA_TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTarget)



; ------ Shoggoth

+Behaviors=(BehaviorName="Faceless_Shoggoth::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement_NoDevice, Child[2]=FacelessRedAlert, Child[3]=GenericAlertHandler)



; --- Advent Skirmisher
+Behaviors=(BehaviorName="Skirmisher_ABA::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Skirmisher_ABA_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Skirmisher_ABA_RedAbilitySelector)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Skirmisher_ABA_RedFirstAction, Child[2]=Skirmisher_ABA_RedLastAction)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Skirmisher_ABA_RedFirstActionSelector)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedFirstActionSelector, NodeType=Selector, Child[0]=ShootWhenFlanking,      Child[1]=DoIfFlankedRunAndGun,      Child[2]=RnGCounterFlank, Child[3]=TryJustice_ABA, Child[4]=ShootWhenKillShot,      Child[5]=PostGrapple,      Child[6]=PostMeleeGrapple,      Child[7]=DoIfFlankedMove_Skirm,       Child[8]=MaybeMelee70,       Child[9]=PrioShots_Skirm,      Child[10]=AdvCaptainTryMoveThenGrenade,       Child[11]=MoveAdvanceToCover,     Child[12]=TryShootOrReloadOrOverwatch_Adv,      Child[13]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Skirmisher_ABA_RedLastActionSelector)
+Behaviors=(BehaviorName=Skirmisher_ABA_RedLastActionSelector, NodeType=Selector,      Child[0]=PostGrapple,      Child[1]=PostMeleeGrapple,      Child[2]=DoIfFlankedMove_Skirm,      Child[3]=AdvCaptainTryGrenade,      Child[4]=PrioShots_Skirm,      Child[5]=TryJustice_ABA,      Child[6]=TryShootOrReloadOrOverwatch_Adv,      Child[7]=HuntEnemyWithCover,      Child[8]=MoveDefensive)

; What the Skirm is allowed to do after Grapple
+Behaviors=(BehaviorName=PostGrapple, NodeType=Sequence,      Child[0]=WasLastAbility-SkirmisherGrapple,      Child[1]=Skirmisher_PostGrappleSelector)
+Behaviors=(BehaviorName=Skirmisher_PostGrappleSelector, NodeType=Selector,      Child[0]=AdvCaptainTryGrenade,      Child[1]=PrioShots_Skirm,      Child[2]=TryJustice_Rand60,      Child[3]=TryShootOrReloadOrOverwatch_Adv,      Child[4]=MoveDefensive)
; Make the Skirm Grapple out after meleeing
+Behaviors=(BehaviorName=PostMeleeGrapple, NodeType=Sequence,      Child[0]=DidTheSkirmMelee,      Child[1]=TryGrapple_Skirm)
+Behaviors=(BehaviorName=DidTheSkirmMelee, NodeType=Selector, Child[0]=WasLastAbility-SkirmisherMelee, Child[1]=WasLastAbility-Justice)
;Run And Gun when Flanked, then Counterflank
+Behaviors=(BehaviorName=DoIfFlankedRunAndGun, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryRunAndGun)
+Behaviors=(BehaviorName=RnGCounterFlank, NodeType=Sequence, Child[0]=WasLastAbility-RunAndGun, Child[1]=TryToCounterflank)
;Grapple when Flanked
+Behaviors=(BehaviorName=DoIfFlankedMove_Skirm, NodeType=Selector, Child[0]=MaybeMelee40, Child[1]=DoIfFlankedGrapple, Child[2]=DoIfFlankedMove)
+Behaviors=(BehaviorName=DoIfFlankedGrapple, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryGrapple_Skirm)
;Even more Grappling
+Behaviors=(BehaviorName=TryGrapple_Skirm, NodeType=Selector, Child[0]=TryGrapple_Skirm_Flank, Child[1]=TryGrapple_Skirm_Any)
+Behaviors=(BehaviorName=TryGrapple_Skirm_Any, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherGrapple, Child[1]=FindGrappleDestination_Skirm_Any, Child[2]=SelectAbility-SkirmisherGrapple)
+Behaviors=(BehaviorName=TryGrapple_Skirm_Flank, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherGrapple, Child[1]=FindGrappleDestination_Skirm_Flank, Child[2]=SelectAbility-SkirmisherGrapple)
+Behaviors=(BehaviorName=FindGrappleDestination_Skirm_Any, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverridePreferredDestinationToSpawnLocation, Child[2]=RestrictToAbilityRange-SkirmisherGrapple, Child[3]=RestrictToEnemyLoS, Child[4]=RestrictToUnflanked, Child[5]=UseDashMovement, Child[6]=FindRestrictedDestination-MWP_GrappleSkirm)
+Behaviors=(BehaviorName=FindGrappleDestination_Skirm_Flank, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverridePreferredDestinationToSpawnLocation, Child[2]=RestrictToAbilityRange-SkirmisherGrapple, Child[3]=RestrictToEnemyLoS, Child[4]=RestrictToUnflanked, Child[5]=RestrictToFlanking, Child[6]=UseDashMovement, Child[7]=FindRestrictedDestination-MWP_GrappleSkirm)
; Random Grapple, for scamper
+Behaviors=(BehaviorName=MaybeGrapple30, NodeType=RandFilter, Child[0]=TryGrapple_Skirm, Param[0]=30)
; Grapple when unsafe to move, also for scamper
+Behaviors=(BehaviorName=NotSafeToMove, NodeType=Inverter, Child[0]=IsSafeToMove)
+Behaviors=(BehaviorName=GrappleWhenUnsafe, NodeType=Sequence, Child[0]=NotSafeToMove, Child[1]=TryGrapple_Skirm)
; Run and Gun
+Behaviors=(BehaviorName=TryRunAndGun, NodeType=Sequence, Child[0]=IsAbilityAvailable-RunAndGun, Child[1]=SelectAbility-RunAndGun)
+Behaviors=(BehaviorName=IsAbilityAvailable-RunAndGun, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RunAndGun, NodeType=Action)

;Justice. Use it to pick on the weak (=Disoriented, confused, panicked, stunned). This should work nicely in tandem with their Flashbang grenade or the chance to stun on their ripjack.
+Behaviors=(BehaviorName=TryJustice_PickOnTheWeak, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectWeakTarget_J, Child[2]=SelectAbility-Justice)
+Behaviors=(BehaviorName=SelectWeakTarget_J, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=EvaluateWeakTargets_J, Child[2]=HasValidTarget-Justice)
+Behaviors=(BehaviorName=EvaluateWeakTargets_J, NodeType=RepeatUntilFail, Child[0]=EvaluateWeakEnemies_J)
+Behaviors=(BehaviorName=EvaluateWeakEnemies_J, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreWeakEnemy_J, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreWeakEnemy_J, NodeType=Successor, Child[0]=ScoreWeakEnemy_J)
+Behaviors=(BehaviorName=ScoreWeakEnemy_J, NodeType=Sequence, Child[0]=TargetIsWeak, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=ScoreByHP)
+Behaviors=(BehaviorName=TargetIsWeak, NodeType=Selector, Child[0]=TargetAffectedByEffect-Confused, Child[1]=TargetAffectedByEffect-Panicked, Child[2]=TargetAffectedByEffect-Disoriented, Child[3]=TargetAffectedByEffect-Berserk, Child[4]=TargetAffectedByEffect-Shattered, Child[5]=TargetAffectedByEffect-Dazed)
;More Justice. An excellent way to remove Overwatchers and Suppressors.
+Behaviors=(BehaviorName=TryJustice_OW, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectOverwatchingEnemyTarget_J, Child[2]=SelectAbility-Justice)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_J, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=EvaluateOverwatchingEnemyTargets_ABA, Child[2]=HasValidTarget-Justice)
+Behaviors=(BehaviorName=TryJustice_Sup, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectSuppressingEnemyTarget_J, Child[2]=SelectAbility-Justice)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_J, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=EvaluateSuppressingEnemyTargets_ABA, Child[2]=HasValidTarget-Justice)
;Standard Justice use. Will only be used sparingly.
+Behaviors=(BehaviorName=TryJustice_Rand30, NodeType=RandFilter, Child[0]=TryJustice, Param[0]=30)
+Behaviors=(BehaviorName=TryJustice_Rand60, NodeType=RandFilter, Child[0]=TryJustice, Param[0]=60)

;Tying the Justice stuff together in a tidy package to put into the first action selector
+Behaviors=(BehaviorName=TryJustice_ABA, NodeType=Selector, Child[0]=TryJustice_OW, Child[1]=TryJustice_Sup, Child[2]=TryJustice_PickOnTheWeak, Child[3]=TryJustice_Rand30)

;Other Skirmisher stuff
+Behaviors=(BehaviorName=MaybeMelee70, NodeType=RandFilter, Child[0]=TryStandardMeleeDash, Param[0]=70)
+Behaviors=(BehaviorName=MaybeMelee40, NodeType=RandFilter, Child[0]=TryStandardMeleeDash, Param[0]=40)

+Behaviors=(BehaviorName=PrioShots_Skirm, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=ShootWhenKillShot, Child[2]=ShootWhenSuppressor, Child[3]=ShootWhenOverwatcher, Child[4]=ShootWhenSureShot)

+Behaviors=(BehaviorName=WasLastAbility-SkirmisherGrapple, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-SkirmisherMelee, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-RunAndGun, NodeType=Condition)

+Behaviors=(BehaviorName=FindRestrictedDestination-MWP_GrappleSkirm, NodeType=Action)

